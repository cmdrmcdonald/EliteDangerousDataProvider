{
  "name": "EDDI",
  "description": "A balanced, non-partisan personality",
  "scripts": {
    "System faction changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "System faction changed",
      "description": "Triggered when there is a change in the controlling faction of a watched system"
    },
    "System state changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'system')}\r\n{SetState('eddi_context_last_action', 'change_state')}\r\n{SetState('eddi_context_system', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n{_ Set up our system name}\r\n{if event.system = homesystem.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'your home system')}\r\n|elif event.system = system.name:\r\n  {set system to OneOf('{P{event.system)}',\r\n                       'this system')}\r\n|else:\r\n  {set system to OneOf('system {P(event.system)}'\r\n                       '{P(event.system)}'))}\r\n}\r\n\r\n{if event.newstate != 'None':\r\n  {_ System has entered a new state}\r\n  {OneOf('Local transmissions report that', 'Information: ', 'Transmission intercepted.  Contents state that ')}\r\n  {if event.newstate = 'Boom':\r\n    {OneOf('{system} is experiencing a commercial boom',\r\n           '{system} is entering a period of hightened commercial success')}\r\n  |elif event.newstate = 'Bust':\r\n    {system} is experiencing economic hardship\r\n  |elif event.newstate = 'Civil Unrest':\r\n    {OneOf('{system} is experiencing civil unrest',\r\n           'there is unrest in the {system} system')}\r\n  |elif event.newstate = 'Civil War':\r\n    {OneOf('{system} is at war with another faction in the same system',\r\n           'civil war has broken out in {system}',\r\n           '{system} has fallen in to civil war',\r\n           'hostilities have broken out in {system}')}\r\n  |elif event.newstate = 'Election':\r\n    {system} is undergoing elections\r\n  |elif event.newstate = 'Expansion':\r\n    {OneOf(\"a faction in {system}'s is attempting to expand in to a neighbouring system\",\r\n           \"a faction in {system}'s is preparing to expand in to a neighbouring system\")}\r\n  |elif event.newstate = 'Famine':\r\n    {system} is suffering from famine\r\n  |elif event.newstate = 'Investment':\r\n    {system}'s controlling faction are investing heavily in their local infrastructure\r\n  |elif event.newstate = 'Lockdown':\r\n    {system} has hightened security due to a lockdown by the controlling faction\r\n  |elif event.newstate = 'Outbreak':\r\n    {system} is suffering from an outbreak of contagious disease\r\n  |elif event.newstate = 'Retreat':\r\n    {system}'s controlling faction is retreating from a neighbouring system\r\n  |elif event.newstate = 'War':\r\n    {system} is now at war with a neighbouring system\r\n  |else:\r\n    {OneOf('{system} has entered {event.state}',\r\n           '{system} is now in a state of {event.state}')}\r\n  }.\r\n}\r\n\r\n",
      "name": "System state changed",
      "description": "Triggered when there is a change in the state of a watched system"
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entering close-quarters combat.",
      "name": "Entered CQC",
      "description": "Triggered when you enter CQC"
    },
    "Mission failed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Mission failed",
      "description": "Triggered when you fail a mission"
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ See if we are carrying non-limpet cargo}\r\n{set carryingvaluablecargo to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity != 'Limpet':\r\n        {set carryingvaluablecargo to 1}\r\n    }\r\n}\r\n\r\n{if carryingvaluablecargo = 1:\r\n  Caution: cargo scan\r\n  {if event.by:\r\n    by {event.by} \r\n  }\r\n  detected.\r\n}\r\n",
      "name": "NPC cargo scan commenced",
      "description": "Triggered when a cargo scan on your ship by an NPC is detected"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Warning: attack \r\n{if event.by:\r\n   by {event.by} \r\n}\r\ndetected.",
      "name": "NPC attack commenced",
      "description": "Triggered when an attach on your ship by an NPC is detected"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Warning: interdiction attempt\r\n{if event.by:\r\n   by {event.by} \r\n}\r\ndetected.\r\n\r\n{Occasionally(3, \"Throttle down or evade.\")}",
      "name": "NPC interdiction commenced",
      "description": "Triggered when an interdiction attempt on your ship by an NPC is detected"
    },
    "Power voucher received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Power voucher received",
      "description": "Triggered when a commander turns in combat vouchers against an opposing power"
    },
    "Ship shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Ship shutdown",
      "description": "Triggered when your ship's system are shutdown"
    },
    "Station no fire zone exited": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Station no fire zone exited",
      "description": "Triggered when your ship exits a station's no fire zone"
    },
    "Station no fire zone entered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Station no fire zone entered",
      "description": "Triggered when your ship enters a station's no fire zone"
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Humanise(event.amount)} credits spent fast-tracking commodities {Occasionally(2, \"for {P(event.power)}\")}.",
      "name": "Power commodity fast tracked",
      "description": "Triggered when a commander fast tracks a commodity of a power"
    },
    "Power commodity delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} units of {event.commodity} delivered {Occasionally(2, \"for {P(event.power)}\")}.",
      "name": "Power commodity delivered",
      "description": "Triggered when a commander delivers a commodity to a power"
    },
    "Power commodity obtained": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} units of {event.commodity} obtained {Occasionally(2, \"for {P(event.power)}\")}.",
      "name": "Power commodity obtained",
      "description": "Triggered when a commander obtains a commodity from a power"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Salary of {Humanise(event.amount)}  credits claimed {Occasionally(2, \"from {P(event.power)}\")}.",
      "name": "Power salary claimed",
      "description": "Triggered when a commander claims salary from a power"
    },
    "Power preparation vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Power preparation vote cast",
      "description": "Triggered when a commander votes for system perparation"
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have defected from {P(event.frompower)} to {P(event.topower)}.",
      "name": "Power defected",
      "description": "Triggered when you defect from one power to another"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You are no longer aligned with {P(event.power)}",
      "name": "Power left",
      "description": "Triggered when you leave a power"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have aligned yourself with {P(event.power)}",
      "name": "Power joined",
      "description": "Triggered when you join a power"
    },
    "Market information updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Market information updated",
      "description": "Triggered when market information for the currently docked station has been updated"
    },
    "Bond awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\r\n\r\nThat's another {event.reward} credits in the bank.",
      "name": "Bond awarded",
      "description": "Triggered when you are awarded a combat bond"
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\nPaid fine of {Humanise(event.amount)} credits.",
      "name": "Fine paid",
      "description": "Triggered when you pay a fine"
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} has given you access to grade {event.rank} blueprints.",
      "name": "Engineer progressed",
      "description": "Triggered when you reach a new rank with an engineer"
    },
    "Modification applied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Modification applied",
      "description": "Triggered when you apply a modification to a module"
    },
    "Modification crafted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Modification crafted",
      "description": "Triggered when you craft a modification to a module"
    },
    "Material donated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n",
      "name": "Material donated",
      "description": "Triggered when you donate a material"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Synthesis complete.",
      "name": "Synthesised",
      "description": "Triggered when you synthesise something from materials"
    },
    "Mission abandoned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Mission abandoned.",
      "name": "Mission abandoned",
      "description": "Triggered when you abandon a mission"
    },
    "Mission completed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.reward > 0:\r\n    Payment of {Humanise(event.reward)} credits {Occasionally(2, 'from {P(event.faction)}')} {OneOf('received', 'confirmed')}.\r\n|elif event.donation > 0:\r\n    {OneOf(\"Donated {Occasionally(2, '{Humanise(event.donation)} credits')} to {Occasionally(2, 'a grateful')} {P(event.faction)}\",\r\n                 \"{P(event.faction)} has {Occasionally(2, 'gratefully')} received your donation {Occasionally(2, 'of {Humanise(event.donation)} credits')}\",\r\n                 \"{P(event.faction)} thanks you for your donation {Occasionally(2, 'of {Humanise(event.donation)} credits')}\"\r\n    )}.\r\n|else:\r\n    Mission completed.\r\n}\r\n{for commodityreward in event.commodityrewards:\r\n  {commodityreward.amount} tonnes of {commodityreward.commodity} {OneOf(\"now on-board\", \"also received\", \"confirmed on-board\")}.\r\n}",
      "name": "Mission completed",
      "description": "Triggered when you complete a mission"
    },
    "Mission accepted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.communal:\r\n    Community goal accepted.\r\n|else:\r\n    Mission for {P(event.faction)} accepted.\r\n    {if event.passengerswanted:\r\n        {set wanteddescription to OneOf(\"wanted passengers\", \"known felons\")}\r\n        Caution: {OneOf(\"you are carrying {wanteddescription}\",\"{wanteddescription} now on board\")}.\r\n    }\r\n}",
      "name": "Mission accepted",
      "description": "Triggered when you accept a mission"
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipCallsign()} handover complete.",
      "name": "Ship delivered",
      "description": "Triggered when your newly-purchased ship is delivered to you"
    },
    "Ship repaired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} repaired.",
      "name": "Ship repaired",
      "description": "Triggered when you repair your ship"
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} refuelled.",
      "name": "Ship refuelled",
      "description": "Triggered when you refuel your ship"
    },
    "Ship restocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} {OneOf(\"restocked\",\"rearmed\")}.",
      "name": "Ship restocked",
      "description": "Triggered when you restock your ship's ammunition"
    },
    "Jumping": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'start')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n\r\n{OneOf(\"Destination confirmed\",\"Jump in progress\",\"Telemetry obtained\")}.\r\n{ShipName()} is {OneOf(\"heading to\", \"on route to\", \"travelling to\", \"in transit to\")} the {P(system.name)} system.\r\n{if system.name = homesystem.name:\r\n    Welcome home, {F(\"Honorific\")}\r\n|else:\r\n    {if system.bodies[0].distance = 0 && system.bodies[0].stellarclass:\r\n        {set stellarclass to slice(system.bodies[0].stellarclass, 0, 1)}\r\n        {if stellarclass = \"D\":\r\n            Caution: white dwarf detected.\r\n        |elif stellarclass = \"N\":\r\n            Caution: neutron star detected.\r\n        |elif stellarclass = \"H\":\r\n            Caution: black hole detected.\r\n        }\r\n    }\r\n\r\n    {if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Independent\" && (!system.allegiance || system.allegiance = \"None\" || system.allegiance = \"Independent\"):\r\n      You {OneOf(\"are leaving\", \"have left\", \"are no longer in\")} {lastsystem.allegiance} space.\r\n    |elif lastsystem.allegiance && lastsystem.allegiance != system.allegiance && system.allegiance && system.allegiance != \"None\":\r\n        You {OneOf(\"are now in\", \"have entered\", \"are entering\")} {system.allegiance} space.\r\n        {if cmdr.title != \"Commander\":\r\n            Welcome back {F(\"Honorific\")}.\r\n        }\r\n    }\r\n\r\n    {if system.visits = 1:\r\n        This is your first visit to this system\r\n    |elif system.visits = 2:\r\n        This is your second visit to this system\r\n    |elif system.visits = 3:\r\n        This is your third visit to this system\r\n    |elif system.visits = 4:\r\n        This is your fourth visit to this system\r\n    |else:\r\n        You have visited this system {system.visits} times\r\n    }.\r\n\r\n    {if !system.population:\r\n        {OneOf(\"This system is unpopulated\",\"There is no human presence here\", \"Humans have yet to colonise this system\")}.\r\n    |else:\r\n        {F(\"System report\")}\r\n    }\r\n\r\n    {if system.distancefromhome:\r\n        {Occasionally(7, \"{OneOf(\\\"You are\\\", \\\"Current location is\\\", \\\"You are now\\\")} {Humanise(system.distancefromhome)} lightyears from {OneOf(\\\"home\\\", \\\"{P(homesystem.name)}\\\")}.\")}\r\n    }\r\n\r\n    {if system.comment:\r\n        You made a {OneOf(\"note\", \"comment\", \"remark\")} {OneOf(\"about\", \"for\", \"on\")} this system.  It {OneOf(\"is as follows\", \"says\", \"reads\", \"is\")} {system.comment}.\r\n    }\r\n}",
      "name": "Jumping",
      "description": "Triggered when you start a jump to another system"
    },
    "Limpet sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Limpet sold",
      "description": "Triggered when you sell limpets to a station"
    },
    "Limpet purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Limpet purchased",
      "description": "Triggered when you buy limpets from a station"
    },
    "Exploration data sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Exploration data for {len(event.systems)} systems sold for {Humanise(event.reward)} credits\r\n\r\n{if len(event.firsts) > 0:\r\n    , with an additional bonus of {Humanise(event.bonus)} credits for\r\n    {if len(event.firsts) = 1:\r\n        one first discovery\r\n    |else:\r\n        {len(event.firsts)} first discoveries\r\n    }\r\n}\r\n.",
      "name": "Exploration data sold",
      "description": "Triggered when you sell exploration data"
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Purchased {OneOf('system', 'exploration')} data for {P(event.system)}\",\r\n            \"{OneOf('system', 'exploration')} data for {P(event.system)} now available\",\r\n            \"{Occasionally(3, '{ShipName()} has')} Received {OneOf('system', 'exploration')} data for {P(event.system)} from station services\",\r\n            \"Receipt of {P(event.system)} {OneOf('system', 'exploration')} data confirmed\")}.",
      "name": "Exploration data purchased",
      "description": "Triggered when you purchase exploration data"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n",
      "name": "Material discovered",
      "description": "Triggered when you discover a material"
    },
    "Material discarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discard')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n",
      "name": "Material discarded",
      "description": "Triggered when you discard a material"
    },
    "Material collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.material)}\r\n",
      "name": "Material collected",
      "description": "Triggered when you collect a material"
    },
    "Killed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Killed",
      "description": "Triggered when you kill another player"
    },
    "Commodity refined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'refine')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n\r\n",
      "name": "Commodity refined",
      "description": "Triggered when you refine a commodity from the refinery"
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Ship interdiction",
      "description": "Triggered when you interdict another ship"
    },
    "Ship interdicted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Ship interdicted",
      "description": "Triggered when your ship is interdicted by another ship"
    },
    "Commander ratings": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Commander ratings",
      "description": "Triggered when your ratings are reported"
    },
    "Commander progress": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Commander progress",
      "description": "Triggered when your progress is reported"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Welcome, Commander.",
      "name": "Commander started",
      "description": "Triggered when you start a new game"
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Neural link\", \"Link\", \"Uplink\")} {OneOf(\"terminated\", \"disengaged\")}.",
      "name": "Controlling ship",
      "description": "Triggered when you switch control from your fighter to your ship"
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = \"Active\":\r\n    {event.name} is now on active duty.\r\n|else:\r\n    {event.name} standing down from active duty.\r\n}",
      "name": "Crew assigned",
      "description": "Triggered when you assign crew"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.name} is no longer a member of the crew.",
      "name": "Crew fired",
      "description": "Triggered when you fire crew"
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.name} has joined the crew.",
      "name": "Crew hired",
      "description": "Triggered when you hire crew"
    },
    "Died": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Died",
      "description": "Triggered when you have died"
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'save')}\r\n{SetState('eddi_context_last_action', 'clear')}\r\n\r\nGoodbye {F(\"Honorific\")}.  It was a pleasure to serve you.",
      "name": "Cleared save",
      "description": "Triggered when you clear your save"
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{P(event.ship)} purchased.",
      "name": "Ship purchased",
      "description": "Triggered when you purchase a ship"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'tradedata')}\r\n{SetState('eddi_context_last_action', 'buy')}\r\n{SetState('eddi_context_tradedata_name', event.system)}\r\n\r\n{OneOf(\"Purchased trade data for {P(event.system)}\",\r\n            \"Trade data for {P(event.system)} now available\",\r\n            \"Received trade data for {P(event.system)} from station services\",\r\n            \"Receipt of {P(event.system)} trade data confirmed\")}.",
      "name": "Trade data purchased",
      "description": "Triggered when you purchase trade data"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName(event.shipid, event.ship)} {OneOf(\"on its way\",\"being transferred\", \"transfer initiated\", \"being transported\", \"being transferred\")} from {P(event.system)}.",
      "name": "Ship transfer initiated",
      "description": "Triggered when you initiate a ship transfer"
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.storedship:\r\n    {OneOf(\"Storing\", \"Mothballing\", \"Stashing\", \"Parking\")} {ShipName(event.storedshipid, event.storedship)} and\r\n|elif event.soldship:\r\n    Selling {ShipName(event.soldshipid, event.soldship)} and\r\n}\r\n\r\n{OneOf(\"swapping\",\"moving\",\"transferring\")} to {ShipName(event.shipid, event.ship)}.\r\n\r\n{set fighterBayShipSwap to F(\"Ship swap fighter bay report\")}\r\n{fighterBayShipSwap}\r\n\r\n{set limpetCheck to F(\"Limpet check\")}\r\n{limpetCheck}",
      "name": "Ship swapped",
      "description": "Triggered when you swap a ship"
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Retired {ShipName(event.shipid, event.ship)} from active duty.\",\r\n             \"Decommissioned {ShipName(event.shipid, event.ship)}.\",\r\n             \"Sold {ShipName(event.shipid, event.ship)}.\",)}",
      "name": "Ship sold",
      "description": "Triggered when you sell a ship"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\r\n    {if event.health < 40:\r\n        Danger:\r\n    |elif event.health < 60:\r\n        Warning:\r\n    |elif event.health < 80:\r\n        Caution:\r\n    }\r\n    {OneOf(\"Hull\", \"Hull integrity\", \"Integrity\", \"Structural integrity\")} {Occasionally(3, \"is\")} at {event.health}%.\r\n}\r\n",
      "name": "Hull damaged",
      "description": "Triggered when your hull is damaged to a certain extent"
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\n{if event.threat < 2:\r\n  Entered signal source.\r\n|elif event.threat = 2:\r\n    Caution: medium-threat signal source.\r\n|elif event.threat = 3:\r\n    Warning: high-threat signal source.\r\n|else:\r\n    Danger: very high-threat signal source.\r\n}\r\n",
      "name": "Entered signal source",
      "description": "Triggered when your ship enters a signal source"
    },
    "Message sent": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'send')}\r\n{SetState('eddi_context_message_name', event.to)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{OneOf(\"Message away\", \"Message sent\", \"Sent\")}.",
      "name": "Message sent",
      "description": "Triggered when you send a message"
    },
    "Message received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{if event.message = \"o7\":\r\n    {event.from} salutes\r\n    {if event.channel = \"player\":\r\n        you\r\n    }.\r\n|else:\r\n    Message received from {event.from}.  Message reads: {event.message}.\r\n}\r\n",
      "name": "Message received",
      "description": "Triggered when you receive a message"
    },
    "Ship rebooted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Ship rebooted",
      "description": "Triggered when you run reboot/repair on your ship"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Neural link\", \"Link\", \"Uplink\")} {Occasionally(2, \"to fighter\")} {OneOf(\"initiated\", \"established\", \"engaged\")}.",
      "name": "Controlling fighter",
      "description": "Triggered when you switch control from your ship to your fighter"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Self-destruct sequence initiated.  Closing heat vents.",
      "name": "Self destruct",
      "description": "Triggered when you start the self destruct sequence"
    },
    "SRV launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"SRV\")} {OneOf(\"launched\", \"away\")}.",
      "name": "SRV launched",
      "description": "Triggered when you launch an SRV from your ship"
    },
    "SRV docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"SRV\")} docked.",
      "name": "SRV docked",
      "description": "Triggered when you dock an SRV with your ship"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Fighter {OneOf(\"docked\", \"redocked\")} {Occasionally(2, \"with ship\")}.",
      "name": "Fighter docked",
      "description": "Triggered when you dock a fighter with your ship"
    },
    "Fighter launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Fighter {OneOf(\"deploying\", \"launching\")} {Occasionally(2, \"from mothership\")}.",
      "name": "Fighter launched",
      "description": "Triggered when you launch a fighter from your ship"
    },
    "Commodity sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'sell')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\n   You have just sold one tonne of {event.commodity} for {event.price} credits\r\n|elif event.amount > 1:\r\n    You have just sold {event.amount} tonnes of {event.commodity} at {event.price} credits per tonne.  Total value is {event.amount * event.price} credits\r\n}\r\n{if event.profit < 0:\r\n    with a loss of {-1 * event.profit * event.amount} credits.\r\n|elif event.profit = 0:\r\n    and broke even on the trade.\r\n|else:\r\n    with a profit of {event.profit * event.amount} credits.\r\n}",
      "name": "Commodity sold",
      "description": "Triggered when you sell a commodity to the markets"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\n{P(event.faction)} just put a bounty of {event.bounty} credits on your head.",
      "name": "Bounty incurred",
      "description": "Triggered when you incur a bounty"
    },
    "Commodity ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n",
      "name": "Commodity ejected",
      "description": "Triggered when you eject a commodity from your ship or SRV"
    },
    "Commodity purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\n   You have just purchased one tonne of {event.commodity} for {event.price} credits.\r\n|elif event.amount > 1:\r\n    You have just purchased {event.amount} tonnes of {event.commodity} at {event.price} credits per tonne.  Total cost is {event.amount * event.price} credits.\r\n}",
      "name": "Commodity purchased",
      "description": "Triggered when you buy a commodity from the markets"
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "No response to our docking request.",
      "name": "Docking timed out",
      "description": "Triggered when your docking request times out"
    },
    "Docking denied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\nWe have been denied docking\r\n\r\n{if event.reason = \"ActiveFighter\":\r\n    because our fighter is deployed\r\n|elif event.reason = \"Distance\":\r\n    because we are too far from the station\r\n|elif event.reason = \"Hostile\":\r\n    because the station's controlling faction doesn't like us\r\n|elif event.reason = \"NoSpace\":\r\n    because there is no space available\r\n|elif event.reason = \"Offences\":\r\n    because we have recently committed an offence against them\r\n|elif event.reason = \"TooLarge\":\r\n    because there are no landing pads that can accomodate the size of our ship\r\n}.",
      "name": "Docking denied",
      "description": "Triggered when your ship is denied docking at a station or outpost"
    },
    "Docking granted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n\r\n{set station to StationDetails(event.station)}\r\n{if station.model = \"Coriolis Starport\" || station.model = \"Orbis Starport\" || station.model = \"Ocellus Starport\" || station.model = \"Unknown Starport\":\r\n    {Pause(8000)}\r\n    {F(\"Landing pad report\")}\r\n}\r\n",
      "name": "Docking granted",
      "description": "Triggered when your ship is granted docking permission at a station or outpost"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Docking request cancelled.",
      "name": "Docking cancelled",
      "description": "Triggered when your ship cancels a docking request at a station or outpost"
    },
    "Docking requested": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Docking requested",
      "description": "Triggered when your ship requests docking at a station or outpost"
    },
    "Heat damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Danger:\")}\r\nHeat damage.",
      "name": "Heat damage",
      "description": "Triggered when your ship is taking damage from excessive heat"
    },
    "Heat warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Warning:\")}\r\nHeat levels beyond operating tolerance.",
      "name": "Heat warning",
      "description": "Triggered when your ship's heat exceeds 100%"
    },
    "Location": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You are\r\n{if event.docked:\r\n    docked at the\r\n    {if event.station = event.body:\r\n        orbital station {P(event.station)}\r\n    |else:\r\n        ground station {P(event.station)} on {P(event.body)}\r\n    }\r\n|elif event.body:\r\n    near {P(event.body)}\r\n}\r\nin the {P(event.system)} system.",
      "name": "Location",
      "description": "Triggered when the commander's location is reported, usually when they reload their game."
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Shields down",
      "description": "Triggered when your ship's shields go offline"
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Shields up",
      "description": "Triggered when your ship's shields come online"
    },
    "Body scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n\r\n{Pause(1000)}\r\n\r\nScan of {P(event.name)} complete.\r\n\r\n{F(\"Body report\")}\r\n",
      "name": "Body scanned",
      "description": "Triggered when you complete a scan of a planetary body"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n\r\n{Pause(1000)}\r\n\r\nScan of {event.stellarclass}-class star {P(event.name)} complete.\r\n\r\n{F(\"Star report\")}\r\n",
      "name": "Star scanned",
      "description": "Triggered when you complete a scan of a stellar body"
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'cockpit')}\r\n{SetState('eddi_context_last_action', 'breach')}\r\n\r\nIs it me, or is it cold in here?",
      "name": "Cockpit breached",
      "description": "Triggered when your ship's cockpit is broken"
    },
    "Commodity collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'cargo')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_cargo_name', event.cargo)}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{event.cargo} now on board.",
      "name": "Commodity collected",
      "description": "Triggered when you pick up a commodity in your ship or SRV"
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have been recognised for your exploration skills, {F(\"Honorific\")}.",
      "name": "Exploration promotion",
      "description": "Triggered when your exploration rank increases"
    },
    "Screenshot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Screenshot",
      "description": "Triggered when you take a screenshot"
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have been recognised for your trading ability, {F(\"Honorific\")}.",
      "name": "Trade promotion",
      "description": "Triggered when you trade rank increases"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\nYou have been recognised for your combat skills, {F(\"Honorific\")}.",
      "name": "Combat promotion",
      "description": "Triggered when your combat rank increases"
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_fine_name', event.victim)}\r\n{SetState('eddi_context_fine_faction', event.faction)}\r\n{SetState('eddi_context_fine_amount', event.fine)}\r\n\r\nYou owe {P(event.faction)} {Humanise(event.fine)} credits for that.",
      "name": "Fine incurred",
      "description": "Triggered when your incur a fine"
    },
    "Entered normal space": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(5000)}\r\n\r\n{OneOf(\"{ShipName()} has\", \"\")} {OneOf(\"left supercruise\", \"{OneOf(\\\"entered\\\", \\\"returned to\\\", \\\"dropped to\\\")} normal space\")}\r\n\r\n{if event.bodytype = 'Planet':\r\n    {OneOf(\"near\", \"close to\", \"in the vicinity of\")} planet {P(event.body)}\r\n|elif event.bodytype = 'Star':\r\n    {OneOf(\"near\", \"close to\", \"in the vicinity of\")} star {P(event.body)}\r\n  |elif event.bodytype = 'Station':\r\n    {OneOf(\"near\", \"close to\", \"in the vicinity of\")} {P(event.body)}\r\n}.\r\n",
      "name": "Entered normal space",
      "description": "Triggered when your ship enters normal space"
    },
    "Entered supercruise": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\n\r\n{OneOf(\"{ShipName()} has\", \"\")} {OneOf(\"entered\", \"jumped to\")} supercruise.\r\n\r\n",
      "name": "Entered supercruise",
      "description": "Triggered when your ship enters supercruise"
    },
    "Bounty awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n    Bounty voucher of {Humanise(event.reward)} credits received from {P(event.rewards[0].faction)}\r\n|elif len(event.rewards) > 1:\r\n    {len(event.rewards)} bounty vouchers received for a total of {Humanise(event.reward)} credits\r\n}\r\n{if event.shared:\r\n    to share between yourself and your wing-mates\r\n}.\r\n",
      "name": "Bounty awarded",
      "description": "Triggered when you are awarded a bounty"
    },
    "Commander continued": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Welcome back {F(\"Honorific\")}.",
      "name": "Commander continued",
      "description": "Triggered when you continue an existing game"
    },
    "Liftoff": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Lift off.",
      "name": "Liftoff",
      "description": "Triggered when your ship lifts off from a planet's surface"
    },
    "Touchdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Touchdown.\r\n\r\n{Pause(2000)}\r\n\r\nCoordinates are {event.longitude} degrees longitude, {event.latitude} degrees latitude.",
      "name": "Touchdown",
      "description": "Triggered when your ship touches down on a planet's surface"
    },
    "Undocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Full control re-established\", \"Docking clamps free\", \"Disengaged from local networks\")}.\r\n\r\n{set limpetcheck to F(\"Limpet check\")}\r\n\r\n{if limpetcheck:\r\n    {Pause(5000)}\r\n    {limpetcheck}\r\n}\r\n",
      "name": "Undocked",
      "description": "Triggered when your ship undocks from a station or outpost"
    },
    "Docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\n{_ Find out in advance what we have to say }\r\n{if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\r\n    {set purchasecheck to F(\"Commodity purchase check\")}\r\n}\r\n{set limpetcheck to F(\"Limpet check\")}\r\n{set swapoutcheck to F(\"Swapout check\")}\r\n{set salecheck to F(\"Commodity sale check\")}\r\n\r\n{if purchasecheck || salecheck || limpetcheck || swapoutcheck:\r\n    {OneOf(\"Establishing uplink with\",\r\n           \"Initiating link to\",\r\n           \"Connecting to \",\r\n           \"Accessing\")}\r\n    {OneOf(\"local\", \"station\", \"{event.station}'s\")}\r\n    {OneOf(\"data net\", \"network\", \"networks\", \"computers\", \"services\")}.\r\n\r\n    {Pause(10000)}\r\n    {OneOf(\"Uplink\", \"Link\", \"Access\", \"Connection\")} {OneOf(\"established\", \"confirmed\", \"obtained\", \"authorised\")}.\r\n    {salecheck}\r\n    {purchasecheck}\r\n    {swapoutcheck}\r\n    {limpetcheck}\r\n|else:\r\n    {OneOf(\"Communications with\", \"Access to\", \"Link to\", \"Access to\")}\r\n    {OneOf(\"local\", \"station\", \"{event.station}'s\")}\r\n    {OneOf(\"data net\", \"network\", \"networks\", \"computers\", \"services\")}\r\n    {OneOf(\"established\", \"confirmed\", \"authorised\", \"obtained\")}.\r\n}",
      "name": "Docked",
      "description": "Triggered when your ship docks at a station or outpost"
    },
    "Jumped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', system.name)}\r\n{SetState('eddi_context_system_system', system.name)}\r\n",
      "name": "Jumped",
      "description": "Triggered when you complete a jump to another system"
    },
    "Galnet news published": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set statustitle to \"^(Galactic News: ((Weekly .*)|(Starport Status Update)))|(Powerplay: Incoming Update)\"}\r\n\r\n{if len(event.items) = 1:\r\n    A new Galnet article has been published, entitled {event.items[0].title}.\r\n    {if !match(event.items[0].title, statustitle):\r\n      It reads: {event.items[0].content}.\r\n    }\r\n|elif len(event.items) > 1:\r\n    {len(event.items)} new Galnet articles have been published.\r\n    {set item to 0}\r\n    {while item < len(event.items):\r\n        {if item = 0:\r\n            The first is entitled {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , and reads: {event.items[item].content}\r\n            }.\r\n        |elif item = 1:\r\n            The second is entitled {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , and reads: {event.items[item].content}\r\n            }.\r\n        |elif item = len(event.items) - 1:\r\n            The last is entitled {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , and reads: {event.items[item].content}\r\n            }.\r\n        |else:\r\n            The next is entitled {event.items[item].title}\r\n            {if !match(event.items[item].title, statustitle):\r\n                , and reads: {event.items[item].content}\r\n            }.\r\n        }\r\n        {set item to item + 1}\r\n        {Pause(1000)}\r\n    }\r\n}",
      "name": "Galnet news published",
      "description": "Triggered when news is published on Galnet"
    },
    "Power expansion vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "name": "Power expansion vote cast",
      "description": "Triggered when a commander votes for system expansion"
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.allegiance = \"Empire\":\r\n    {if cmdr.empirerating.rank <= 4:\r\n       commander\r\n    |elif cmdr.empirerating.rank = 5:\r\n        sir\r\n    |elif cmdr.empirerating.rank <= 11:\r\n        my lord\r\n    |elif cmdr.empirerating.rank = 12:\r\n        your grace\r\n    |elif cmdr.empirerating.rank = 13:\r\n        your royal highness\r\n    |elif cmdr.empirerating.rank = 14:\r\n        your majesty\r\n    }\r\n|elif system.allegiance = \"Federation\":\r\n    {if cmdr.federationrating.rank = 0:\r\n        commander\r\n    |else:\r\n        {cmdr.federationrating.name}\r\n    }\r\n|else:\r\n    commander\r\n}\r\n",
      "name": "Honorific",
      "description": "Function to provide a suitable honorific for your commander"
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "Nothing of interest here.",
      "name": "Station report",
      "description": "Function to report on the details of the current station"
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    I'm not sure which system you are asking about.\r\n|else:\r\n    {P(reportsystem.name)} is\r\n    {if reportsystem.allegiance = \"Federation\":\r\n        a Federation\r\n    |elif reportsystem.allegiance = \"Empire\":\r\n        an Empire\r\n    |else:\r\n        an independent\r\n    }\r\n    {if reportsystem.government:\r\n        {reportsystem.government}\r\n    |else:\r\n      system\r\n    }\r\n    {OneOf(\"of\", \"with a population of\", \"home to\", \"supporting\")} {Humanise(reportsystem.population)} {OneOf(\"people\", \"souls\")}\r\n    {if reportsystem.power:\r\n        , {OneOf(\"aligned to\", \"allied with\", \"controlled by\")} {P(reportsystem.power)}\r\n    }.\r\n\r\n    {if reportsystem.faction:\r\n      {P(reportsystem.faction)} is the {OneOf(\"controlling\", \"local\", \"immediate\")} {OneOf(\"power\", \"faction\")}.\r\n    }\r\n\r\n    {if len(reportsystem.stations) = 0:\r\n      There are no stations present\r\n    |else:\r\n        {if len(reportsystem.orbitalstations) = 0:\r\n            {if len(reportsystem.planetarystations) = 1:\r\n                There is {OneOf(\"a single\", \"a lone\", \"just one\", \"one\")} planetary station\r\n            |else:\r\n                There are {len(reportsystem.planetarystations)} planetary stations\r\n            }\r\n        |elif len(reportsystem.orbitalstations) = 1:\r\n            There is {OneOf(\"a single\", \"a lone\", \"just one\", \"one\")} orbital station\r\n            {if len(reportsystem.planetarystations) = 1:\r\n                and {OneOf(\"a lone\", \"a single\", \"one\")} planetary station\r\n            |elif len(reportsystem.planetarystations) > 1:\r\n                and {len(reportsystem.planetarystations)} planetary stations\r\n            }\r\n        |else:\r\n            There are {len(reportsystem.orbitalstations)} orbital stations\r\n            {if len(reportsystem.planetarystations) = 1:\r\n                and {OneOf(\"a lone\", \"a single\", \"one\")} planetary station\r\n            |elif len(reportsystem.planetarystations) > 1:\r\n                and {len(reportsystem.planetarystations)} planetary stations\r\n            }\r\n        }\r\n    }\r\n    in this system.\r\n}",
      "name": "System report",
      "description": "Function to report on the details of the contextual star system"
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set  controllers to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Controller\") != -1:\r\n        {set controllers to controllers + 1}\r\n    }\r\n}\r\n\r\n{set limpets to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name = \"Limpet\":\r\n        {set limpets to limpets + cargo.amount}\r\n    }\r\n}\r\n{set tenpercent to ship.cargocapacity / 10 - 1}\r\n{if controllers > 0 && limpets = 0:\r\n    Reminder: you have a limpet controller but are not carrying any limpets.\r\n|elif controllers = 0 && limpets > 0:\r\n    You are carrying limpets but no limpet controller.\r\n|elif controllers > 0 && limpets < tenpercent:\r\n    You only have {limpets} limpets on-board; you might want to consider re-stocking.\r\n}\r\n",
      "name": "Limpet check",
      "description": "Check for the presence/absence of limpets and limpet controllers"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.population > 0:\r\n    There is\r\n    {if system.security = \"None\":\r\n        no\r\n    |elif system.security = \"Low\":\r\n        {OneOf(\"minimal\", \"low\", \"weak\")}\r\n    |elif system.security = \"Medium\":\r\n        {OneOf(\"standard\", \"medium\", \"average\")}\r\n    |elif system.security = \"High\":\r\n        {OneOf(\"high\", \"heavy\", \"strong\")}\r\n    |else:\r\n        {system.security}\r\n    }\r\n    {OneOf(\"police\", \"security\", \"law enforcement\")} presence {OneOf(\"here\", \"in this system\", \"in the locality\")}.\r\n}",
      "name": "Security presence report",
      "description": "Function to report on the details of system security"
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set insurance to round(ship.value * cmdr.insurance / 100)}\r\n\r\n{set covereds to round((cmdr.credits / insurance) - 0.5)}\r\n\r\n{if covereds = 0:\r\n  Danger: you do not have enough credits to cover your insurance excess.\r\n|elif covereds = 1:\r\n  Caution: you onlt have enough credits to cover a single insurance excess.\r\n|elif covereds < 4:\r\n  Note: you only have enough credits to cover {covereds} insurance excesses.\r\n}\r\n",
      "name": "Insurance check",
      "description": "Check for enough credits to cover your insurance"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Track if there is any damage}\r\n{set damaged to 0}\r\n\r\n{_ Announce hull health}\r\n{if ship.health < 100:\r\n    Hull at {Humanise(ship.health)}%.\r\n    {set damaged to 1}\r\n}\r\n\r\n{_ Announce critical module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{if ship.powerplant.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerplant])}\r\n|elif ship.powerplant.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerplant])}\r\n}\r\n\r\n{if ship.thrusters.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.thrusters])}\r\n|elif ship.thrusters.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.thrusters])}\r\n}\r\n\r\n{if ship.frameshiftdrive.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\r\n|elif ship.frameshiftdrive.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\r\n}\r\n\r\n{if ship.powerdistributor.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerdistributor])}\r\n|elif ship.powerdistributor.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerdistributor])}\r\n}\r\n\r\n{if ship.lifesupport.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.lifesupport])}\r\n|elif ship.lifesupport.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.lifesupport])}\r\n}\r\n\r\n{if ship.sensors.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.sensors])}\r\n|elif ship.sensors.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.sensors])}\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    Major damage to\r\n    {if len(majordamage) = 1:\r\n        {majordamage[0].name}\r\n    |elif len(majordamage) = 2:\r\n        {majordamage[0].name} and {majordamage[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(majordamage):\r\n            {if cur = 0:\r\n                {majordamage[cur].name}\r\n            |elif cur < len(majordamage) - 1:\r\n                , {majordamage[cur].name}\r\n            |else:\r\n                ,and {majordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{if len(minordamage) > 0:\r\n    {set damaged to 1}\r\n    Minor damage to\r\n    {if len(minordamage) = 1:\r\n        {minordamage[0].name}\r\n    |elif len(minordamage) = 2:\r\n        {minordamage[0].name} and {minordamage[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(minordamage):\r\n            {if cur = 0:\r\n                {minordamage[cur].name}\r\n            |elif cur < len(minordamage) - 1:\r\n                , {minordamage[cur].name}\r\n            |else:\r\n                ,and {minordamage[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }.\r\n}\r\n\r\n{_ Announce other module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.health < 60:\r\n        {set majordamage to cat(majordamage, [compartment.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [compartment.module.name])}\r\n    }\r\n}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module.health < 60:\r\n        {set majordamage to cat(majordamage, [hardpoint.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [hardpiont.module.name])}\r\n    }\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    {if len(majordamage) = 1:\r\n       One other ship component with major damage\r\n    |elif len(majordamage) > 1:\r\n        {len(majordamage)} other ship components with major damage\r\n    }\r\n    {if len(minordamage) = 1:\r\n       and one other ship component with minor damage\r\n    |elif len(minordamage) > 1:\r\n       and {len(minordamage)} other ship components with minor damage\r\n    }.\r\n|elif len(minordamage) = 1:\r\n    {set damaged to 1}\r\n    One other ship component with minor damage.\r\n|elif len(minordamage) > 1:\r\n    {set damaged to 1}\r\n    {len(minordamage)} other ship components with minor damage.\r\n}\r\n\r\n{if damaged = 0:\r\n    {OneOf(\"All systems fully operational.\", \"{ShipName()} is fully operational.\", \"{ShipName()} is undamaged.\")}\r\n}\r\n",
      "name": "Damage check",
      "description": "Check on the levels of damage to your ship"
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDDBID = module.EDDBID:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    You could save {Humanise(saving)} credits by swapping out your {shipmodule.name} here.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}\r\n",
      "name": "Swapout check",
      "description": "Check to see if any fitted modules are available more cheaply here"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for commodity in station.commodities:\r\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\r\n        {set discount to commodity.avgprice - commodity.buyprice}\r\n        {if discount > best.avgprice - best.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to best}\r\n            {set best to commodity}\r\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to commodity}\r\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\r\n            {set thirdbest to commodity}\r\n        }\r\n    }\r\n}\r\n\r\n{if best:\r\n    The local market is selling {best.name} at a good price\r\n    {if secondbest\r\n       , as well as {secondbest.name}\r\n        {if thirdbest:\r\n            and {thirdbest.name}\r\n        }\r\n    }\r\n.}\r\n",
      "name": "Commodity purchase check",
      "description": "Check to see which commodities are the best to purchase"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given commodity in market}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.EDDBID = commodity.EDDBID:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.amount}\r\n        {if cargo.stolen = true:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.missionid:\r\n            {_ don't do anything with mission cargo at the moment}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{if len(profitablecommodities) > 0:\r\n    You can sell your\r\n    {if len(profitablecommodities) = 1:\r\n        {profitablecommodities[0].name}\r\n    |elif len(profitablecommodities) = 2:\r\n        {profitablecommodities[0].name} and {profitablecommodities[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(profitablecommodities):\r\n            {if cur = 0:\r\n                {profitablecommodities[cur].name}\r\n            |elif cur < len(profitablecommodities) - 1:\r\n                , {profitablecommodities[cur].name}\r\n            |else:\r\n                , and {profitablecommodities[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    for a profit of {totalprofit} credits.\r\n}\r\n\r\n{if len(stolencommodities) > 0 && station.hasblackmarket:\r\n    You can {OneOf('offload, dump', 'fence')} your stolen\r\n    {if len(stolencommodities) = 1:\r\n        {stolencommodities[0].name}\r\n    |elif len(stolencommodities) = 2:\r\n        {stolencommodities[0].name} and {stolencommodities[1].name}\r\n    |else:\r\n        {set cur to 0}\r\n        {while cur < len(stolencommodities):\r\n            {if cur = 0:\r\n                {stolencommodities[cur].name}\r\n            |elif cur < len(stolencommodities) - 1:\r\n                , {stolencommodities[cur].name}\r\n            |else:\r\n                , and {stolencommodities[cur].name}\r\n            }\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n    here.\r\n}\r\n",
      "name": "Commodity sale check",
      "description": "Check to see which commodities can be sold here"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "name": "Repeat last speech",
      "description": "Repeat the last thing said"
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set landingpad to state.eddi_context_landing_pad_pad}\r\nLanding pad {landingpad} is at\r\n{if landingpad = 1:\r\n    six o'clock near\r\n|elif landingpad = 2:\r\n    six o'clock near\r\n|elif landingpad = 3:\r\n    six o'clock far\r\n|elif landingpad = 4:\r\n    six o'clock far\r\n|elif landingpad = 5:\r\n    seven o'clock near\r\n|elif landingpad = 6:\r\n    seven o'clock near\r\n|elif landingpad = 7:\r\n    seven o'clock far\r\n|elif landingpad = 8:\r\n    seven o'clock far\r\n|elif landingpad = 9:\r\n    eight o'clock near\r\n|elif landingpad = 10:\r\n    eight o'clock far\r\n|elif landingpad = 11:\r\n    nine o'clock near\r\n|elif landingpad = 12:\r\n    nine o'clock near\r\n|elif landingpad = 13:\r\n    nine o'clock mid\r\n|elif landingpad = 14:\r\n    nine o'clock far\r\n|elif landingpad = 15:\r\n    nine o'clock far\r\n|elif landingpad = 16:\r\n    ten o'clock near\r\n|elif landingpad = 17:\r\n    ten o'clock near\r\n|elif landingpad = 18:\r\n    ten o'clock far\r\n|elif landingpad = 19:\r\n    ten o'clock far\r\n|elif landingpad = 20:\r\n    eleven o'clock near\r\n|elif landingpad = 21:\r\n    eleven o'clock near\r\n|elif landingpad = 22:\r\n    eleven o'clock far\r\n|elif landingpad = 23:\r\n    eleven o'clock far\r\n|elif landingpad = 24:\r\n    twelve o'clock near\r\n|elif landingpad = 25:\r\n    twelve o'clock far\r\n|elif landingpad = 26:\r\n    one o'clock near\r\n|elif landingpad = 27:\r\n    one o'clock near\r\n|elif landingpad = 28:\r\n    one o'clock mid\r\n|elif landingpad = 29:\r\n    one o'clock far\r\n|elif landingpad = 30:\r\n    one o'clock far\r\n|elif landingpad = 31:\r\n    two o'clock near\r\n|elif landingpad = 32:\r\n    two o'clock near\r\n|elif landingpad = 33:\r\n    two o'clock far\r\n|elif landingpad = 34:\r\n    two o'clock far\r\n|elif landingpad = 35:\r\n    three o'clock near\r\n|elif landingpad = 36:\r\n    three o'clock near\r\n|elif landingpad = 37:\r\n    three o'clock mid\r\n|elif landingpad = 38:\r\n    three o'clock far\r\n|elif landingpad = 39:\r\n    four o'clock near\r\n|elif landingpad = 40:\r\n    four o'clock far\r\n|elif landingpad = 41:\r\n    five o'clock near\r\n|elif landingpad = 42:\r\n    five o'clock near\r\n|elif landingpad = 43:\r\n    five o'clock mid\r\n|elif landingpad = 44:\r\n    five o'clock far\r\n|elif landingpad = 45:\r\n    five o'clock far\r\n}\r\n, as you enter with the green lights on your right.\r\n\r\n",
      "name": "Landing pad report",
      "description": "Report on the location of a landing pad"
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n|else:\r\n    {P(reportbody.name)} is a\r\n    {if reportbody.gravity < 0.5:\r\n        low-gravity\r\n    |elif reportbody.gravity <2:\r\n        medium-gravity\r\n    |elif reportbody.gravity <4:\r\n        high-gravity\r\n    |else:\r\n        extremely high-gravity\r\n    }\r\n\r\n    {if reportbody.tidallylocked:\r\n        tidally-locked\r\n    }\r\n\r\n    {if reportbody.terraformstate = \"Terraformable\":\r\n        terraformable\r\n    |elif reportbody.terraformstate = \"Terraformed\":\r\n        terraformed\r\n    }\r\n\r\n    {if len(reportbody.rings) > 0:\r\n        ringed\r\n    }\r\n\r\n    {reportbody.planettype}\r\n\r\n    {if reportbody.terraformstate = \"Terraforming\":\r\n      in the process of being terraformed\r\n    }\r\n\r\n    that is\r\n\r\n    {if reportbody.landable:\r\n        suitable\r\n    |else:\r\n        unsuitable\r\n    }\r\n    for landing.\r\n\r\n    {_ Atmosphere? }\r\n\r\n    {_ Volcanism? }\r\n\r\n    {if reportbody.landable :\r\n        It has a\r\n        {if reportbody.rotationalperiod <= 0.5:\r\n            fast\r\n        |elif reportbody.rotationalperiod > 20.0:\r\n            slow\r\n        }\r\n        rotational period of {Humanise(reportbody.rotationalperiod)} days.\r\n\r\n        {set goodmaterials to []}\r\n        {set greatmaterials to []}\r\n        {for material in reportbody.materials:\r\n            {if material.percentage >= MaterialDetails(material.material).greatpctbody:\r\n                {set greatmaterials to cat(greatmaterials, [material])}\r\n            |elif material.percentage >= MaterialDetails(material.material).goodpctbody:\r\n                {set goodmaterials to cat(goodmaterials, [material])}\r\n            }\r\n        }\r\n\r\n        {if len(greatmaterials) > 0:\r\n            This body contains very high levels of\r\n            {if len(greatmaterials) = 1:\r\n                {greatmaterials[0].material}\r\n            |elif len(greatmaterials) = 2:\r\n                {greatmaterials[0].material} and {greatmaterials[1].material}\r\n            |else:\r\n                {set cur to 0}\r\n                {while cur < len(greatmaterials):\r\n                    {if cur = 0:\r\n                        {greatmaterials[cur].material}\r\n                    |elif cur < len(greatmaterials) - 1:\r\n                        , {greatmaterials[cur].material}\r\n                    |else:\r\n                        , and {greatmaterials[cur].material}\r\n                    }\r\n                    {set cur to cur + 1}\r\n                }\r\n            }\r\n        }\r\n        {if len(goodmaterials) > 0:\r\n            {if len(greatmaterials) > 0:\r\n                and high levels of\r\n            |else:\r\n                This body contains high levels of\r\n            }\r\n            {if len(goodmaterials) = 1:\r\n                {goodmaterials[0].material}\r\n            |elif len(goodmaterials) = 2:\r\n                {goodmaterials[0].material} and {goodmaterials[1].material}\r\n            |else:\r\n                {set cur to 0}\r\n                {while cur < len(goodmaterials):\r\n                    {if cur = 0:\r\n                        {goodmaterials[cur].material}\r\n                    |elif cur < len(goodmaterials) - 1:\r\n                        , {goodmaterials[cur].material}\r\n                    |else:\r\n                        , and {goodmaterials[cur].material}\r\n                    }\r\n                    {set cur to cur + 1}\r\n                }\r\n            }\r\n        }\r\n        {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\n            .\r\n        }\r\n    }\r\n}",
      "name": "Body report",
      "description": "Function to report on the details of the contextual body"
    },
    "Star report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which star you are asking about.\r\n|else:\r\n    {set mainsequence to 0}\r\n    This is\r\n    {if reportbody.stellarclass = \"O\":\r\n        an incredibly rare main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"B\":\r\n        a very rare main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"A\":\r\n        a rare main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"F\":\r\n        an uncommon main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"G\":\r\n        a common main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"K\":\r\n        a common main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"M\":\r\n        a very common main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"L\":\r\n        a brown dwarf\r\n    |elif reportbody.stellarclass = \"T\":\r\n        a brown dwarf\r\n    |elif reportbody.stellarclass = \"Y\":\r\n        a brown dwarf\r\n    |elif reportbody.stellarclass = \"TTS\":\r\n        a T tauri star in the process of gravitational contraction\r\n    |elif reportbody.stellarclass = \"AeBe\":\r\n        a very young proto-star yet to enter main sequence {Occasionally(4, \"but on the way to becoming an A or B class star\")}\r\n    |elif reportbody.stellarclass = \"W\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"WN\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"WNC\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"WC\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"WO\":\r\n        an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    |elif reportbody.stellarclass = \"CS\":\r\n        a carbon star\r\n    |elif reportbody.stellarclass = \"C\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    |elif reportbody.stellarclass = \"CN\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    |elif reportbody.stellarclass = \"CJ\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(2, \"with high levels of carbon 13 in its atmosphere\")}\r\n    |elif reportbody.stellarclass = \"CH\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    |elif reportbody.stellarclass = \"CHd\":\r\n        a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    |elif reportbody.stellarclass = \"MS\":\r\n        a late sequence star {Occasionally(4, \"that was once an M class star and is on the way to becoming a carbon star\")}\r\n    |elif reportbody.stellarclass = \"S\":\r\n        a late sequence star {Occasionally(4, \"that was once an M class star and is becoming a carbon star\")}\r\n    |elif reportbody.stellarclass = \"D\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DA\":\r\n        a white dwarf {Occasionally(4, \"with a hydrogen-rich atmosphere\")}\r\n    |elif reportbody.stellarclass = \"DAB\":\r\n        a white dwarf {Occasionally(4, \"with an atmosphere rich in hydrogen and helium\")}\r\n    |elif reportbody.stellarclass = \"DAO\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DAZ\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DAV\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DB\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DBZ\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DBV\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DO\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DOV\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DQ\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DC\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DCV\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"DX\":\r\n        a white dwarf\r\n    |elif reportbody.stellarclass = \"N\":\r\n        a neuutron star {Occasionally(4, \"that has a dangerously high-density core\")}\r\n    |elif reportbody.stellarclass = \"H\":\r\n        a black hole\r\n    |elif reportbody.stellarclass = \"X\":\r\n        an exotic stellar entity\r\n    |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\r\n         a supermassive black hole\r\n    |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n        a blue-white supergiant {Occasionally(4, \"that is expanding towards being a red supergiant\")}\r\n    |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\r\n        a yellow-white supergiant {Occasionally(4, \"that is expanding towards being a red supergiant\")}\r\n    |elif reportbody.stellarclass = \"M_RedSuperGiant\":\r\n        a red supergiant {Occasionally(4, \"in its helium burning phase\")}\r\n    |elif reportbody.stellarclass = \"M_RedGiant\":\r\n        a red giant {Occasionally(4, \"that is expanding towards being a red supergiant\")}\r\n    |elif reportbody.stellarclass = \"K_OrangeGiant\":\r\n        an orange giant {Occasionally(4, \"that is expanding as it heads towards the end of its life\")}\r\n    |elif reportbody.stellarclass = \"RoguePlanet\":\r\n        a rogue planet\r\n    |elif reportbody.stellarclass = \"Nebula\":\r\n        a nebula\r\n    |elif reportbody.stellarclass = \"StellarRemnantNebula\":\r\n        a nebula remnant\r\n    }\r\n\r\n    {OneOf(\"that has been around for {Humanise(reportbody.age)} years\",\r\n           \"that is {Humanise(reportbody.age)} years old\",\r\n           \"of {Humanise(reportbody.age)} years\",\r\n    )}\r\n    {if reportbody.age < 1000000:\r\n        making it one of the youngest stars in the galaxy\r\n    |elif reportbody.age >14000000000:\r\n        making it one of the oldest stars in the galaxy\r\n    }.\r\n\r\n    {if mainsequence = 1:\r\n        {Occasionally(2,\"As you can see, it emits a {reportbody.chromaticity} light.\")}\r\n\r\n        {set notables to []}\r\n\r\n        {if reportbody.massprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low solar mass of \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low solar mass of \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability <1:\r\n            {set notables to cat(notables, [\"an unusually low solar mass\"])}\r\n        |elif reportbody.massprobability <10:\r\n            {set notables to cat(notables, [\"lower than average solar mass\"])}\r\n        |elif reportbody.massprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an incredibly high solar mass of \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an extremely high solar mass of \", Humanise(reportbody.solarmass))])}\r\n        |elif reportbody.massprobability > 99:\r\n            {set notables to cat(notables, [\"an unusually high solar mass\"])}\r\n        |elif reportbody.massprobability > 90:\r\n            {set notables to cat(notables, [\"higher than average solar mass\"])}\r\n        }\r\n\r\n        {if reportbody.radiusprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low solar radius of \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low solar radius of \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability <1:\r\n            {set notables to cat(notables, [\"an unusually low solar radius\"])}\r\n        |elif reportbody.radiusprobability <10:\r\n            {set notables to cat(notables, [\"lower than average solar radius\"])}\r\n        |elif reportbody.radiusprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an extremely high solar radius of \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high solar radius of \", Humanise(reportbody.solarradius))])}\r\n        |elif reportbody.radiusprobability > 99:\r\n            {set notables to cat(notables, [\"an unusually high solar radius\"])}\r\n        |elif reportbody.radiusprobability > 90:\r\n            {set notables to cat(notables, [\"higher than average solar radius\"])}\r\n        }\r\n\r\n        {if reportbody.tempprobability < 0.01:\r\n            {set notables to cat(notables, [cat(\"an incredibly low surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability <0.1:\r\n            {set notables to cat(notables, [cat(\"an extremely low surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability <1:\r\n            {set notables to cat(notables, [\"an unusually low surface temperature\"])}\r\n        |elif reportbody.tempprobability <10:\r\n            {set notables to cat(notables, [\"lower than average surface temperature\"])}\r\n        |elif reportbody.tempprobability > 99.99:\r\n            {set notables to cat(notables, [cat(\"an extremely high surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability > 99.9:\r\n            {set notables to cat(notables, [cat(\"an incredibly high surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n        |elif reportbody.tempprobability > 99:\r\n            {set notables to cat(notables, [\"an unusually high surface temperature\"])}\r\n        |elif reportbody.tempprobability > 90:\r\n            {set notables to cat(notables, [\"higher than average surface temperature\"])}\r\n        }\r\n\r\n        {if len(notables) = 0:\r\n            {OneOf(\"\", \"This is a typical example of this class of star.\", \"There is nothing particularly notable about this star.\", \"It is an average example for such a star.\")}\r\n        |else:\r\n            {OneOf('Compared to other stars in its class', 'In comparison to other {reportbody.stellarclass}-class stars', 'Relative to other {reportbody.stellarclass}-class stars')}, this star is\r\n            {if len(notables) = 1:\r\n                notable for having {notables[0]}.\r\n            |elif len(notables) = 2:\r\n                {OneOf('interesting', 'unusual')}, with {notables[0]} and {notables[1]}.\r\n            |elif len(notables) = 3:\r\n                {OneOf('exceptional', 'remarkable')}, with {notables[0]}, {notables[1]} and {notables[2]}.\r\n            }\r\n        }\r\n    }    \r\n}",
      "name": "Star report",
      "description": "Function to report on the details of the contextual body"
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    I'm not sure which system you are asking about.\r\n|else:\r\n    Distance to {P(reportsystem.name)} is {Humanise(Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} light years.\r\n}\r\n\r\n\r\n\r\n",
      "name": "System distance report",
      "description": "Function to report on the distance to the contextual system"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    I'm not sure which system you are asking about.\r\n|else:\r\n    {P(reportsystem.name)}\r\n    {if reportsystem.state = \"None\":\r\n      is not in any particular state at current\r\n    |elif reportsystem.state = \"Retreat\":\r\n        is in retreat\r\n    |elif reportsystem.state = \"War\":\r\n        is at war; caution is advised\r\n    |elif reportsystem.state = \"Boom\":\r\n        is undergoing a boom; there might be good trading profits to be made here\r\n    |elif reportsystem.state = \"Civil War\":\r\n        is experiencing civil unrest; caution is advised\r\n    |elif reportsystem.state = \"Civil War\":\r\n        is in civil war; caution is advised\r\n    |elif reportsystem.state = \"Famine\":\r\n        is in a state of famine; caution is advised\r\n    |elif reportsystem.state = \"Lockdown\":\r\n        is in lockdown; caution is advised\r\n    |elif reportsystem.state = \"Outbreak\":\r\n        is attempting to contain an outbreak of disease; caution is advised\r\n    |elif reportsystem.state = \"Expansion\":\r\n        is gearing up to expand to another system\r\n    |elif reportsystem.state = \"Bust\":\r\n        is financially bust\r\n    |elif reportsystem.state = \"Election\":\r\n        is electing new leaders\r\n    |elif reportsystem.state = \"Investment\":\r\n        is investing in its infrastructure\r\n    |else:\r\n    }\r\n    .\r\n}",
      "name": "System state report",
      "description": "Report on the current state of the contextual system"
    },
	"Ship swap fighter bay report": {
	  "enabled":true,
	  "priority": 3,
	  "responder": false,
	  "script": "{set  fighterBay to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Fighter\") != -1:\r\n        {set fighterBay to fighterBay + 1}\r\n    }\r\n}\r\n\r\n{if fighterBay > 0:\r\n    Reminder: Ship has fighter bay, ensure you set a crewmember to active!\r\n}",
	  "name": "Ship swap fighter bay report",
	  "description": "Reminder when switching ships to activate a crewmember"
	}
  }
}