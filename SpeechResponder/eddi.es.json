{
  "name": "Shirka 3.6",
  "description": "Original creada por Altair28, mod. por Hoksilato",
  "scripts": {
    "AFMU repairs": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "módulo de {event.item} \n{if event.repairedfully:\n    completamente reparado\n|else:\n    parcialmente reparado \n    {Occasionally(2, cat(\n        OneOf(\"al \", \"en un \"),\n        Humanise(event.health * 100),\n        \" por ciento de funcionalidad\"\n    ))}\n}\n\n{Occasionally(2, \n    cat(OneOf(\", \", \"y\"), \" listo para su reactivación\")\n)}.",
      "default": true,
      "name": "AFMU repairs",
      "description": "Activado al reparar módulos utilizando la Unidad de automantenimiento (AFMU)"
    },
    "Blueprint make report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n    \r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(blueprint.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n                {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        No puede hacer ningún {blueprintname}\r\n    |elif canbemade = 1:\r\n        Solo puede hacer un {blueprintname}\r\n    |else:\r\n        Puede hacer {canbemade} {blueprintname}\r\n    }\r\n|else:\r\n    No hay información disponible sobre los materiales necesarios para hacer {blueprintname}\r\n}.\r\n",
      "default": true,
      "name": "Blueprint make report",
      "description": "Informa de la cantidad que puedes hacer de un plano en particular"
    },
    "Blueprint material report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch blueprint from state }\n{set blueprintname to state.blueprint}\n{if blueprintname:\n    {_ Fetch full blueprint details }\n    {set blueprint to BlueprintDetails(blueprintname)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'blueprint')}\n    {SetState('eddi_context_blueprint_name', blueprintname)}\n}\n\n{if !blueprint:\n    {_ Fetch from context }\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\n}\n\n{if blueprint:\n    {set materials to len(blueprint.materials)}\n    {blueprintname} requiere \n    {if materials = 1:\n        {blueprint.materials[0].material}\n    |elif materials = 2:\n        {blueprint.materials[0].material} y {blueprint.materials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(blueprint.materials):\n            {if cur = 0:\n                {blueprint.materials[cur].material}\n            |elif cur < len(blueprint.materials) - 1:\n                , {blueprint.materials[cur].material}\n            |else:\n                , and {blueprint.materials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }\n|else:\n    No hay información disponible sobre los materiales necesarios para hacer {blueprintname}\n}.\n",
      "default": true,
      "name": "Blueprint material report",
      "description": "Informa de los materiales requeridos de un plano"
    },
    "Body atmosphere report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportAtmoPressure to 0}   {_ Set to 1 if you want to here about the atmospheric pressure. _}\r\n{set reportAtmoTempScale to 0}  {_ Set to 0 if you want to hear about temperatures in Kelvin _}\r\n                                {_ Set to 1 if you want to hear about temperatures in Celsius _}\r\n                                {_ Set to 2 if you want to hear about temperatures in Fahrenheit _}\r\n                                {_ Set to 3 if you don't want to hear about the temperature of the body _}\r\n\r\n{_ Define functions for converting temperature scales _}\r\n{set ToCelsius(kelvin) to: {round(kelvin - 273, 0)}}\r\n{set ToFahrenheit(kelvin) to: {round((kelvin-273)*9/5 + 32 , 0)}}\r\n{set TempCalc(kelvin) to: \r\n    {if reportAtmoTempScale = 0: {kelvin}}\r\n    {if reportAtmoTempScale = 1: {ToCelsius(kelvin)}}\r\n    {if reportAtmoTempScale = 2: {ToFahrenheit(kelvin)}}\r\n}\r\n\r\n{_ Name our temperature scale _}\r\n{if reportAtmoTempScale = 0: {set tempscale to: Kelvin}}\r\n{if reportAtmoTempScale = 1: {set tempscale to: degrees Celsius}}\r\n{if reportAtmoTempScale = 2: {set tempscale to: degrees Fahrenheit}}\r\n\r\n{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n\r\n|else:\r\n\r\n    {if find(reportbody.planettype, \"giant\") >= 0:\r\n        {if find(reportbody.planettype, \"Class\") >= 0: \r\n            {set sudarsky to Occasionally(3, \"Sud-dar-ski\")}\r\n        }\r\n        {set planetdesc to OneOf(\"{sudarsky} Gas giants like this one have\", \"This {sudarsky} gas giant has\")}\r\n        {if find(reportbody.planettype, \"class V\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(1373)}}\r\n                temperatures above {Humanise(tempmin)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"vaporized silicates and iron\", \"silicate and iron vapors\")}.\r\n        |elif find(reportbody.planettype, \"class IV\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(354)}}\r\n                {set tempmax to: {TempCalc(903)}}\r\n                temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"alkali metals vapors\", \"vaporized alkali metals\")}.   \r\n        |elif find(reportbody.planettype, \"class III\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(251)}}\r\n                {set tempmax to: {TempCalc(353)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale},\r\n            }\r\n            a temperature at which {OneOf(\"no gaseous elements will form any clouds\", \"suitable chemicals are not present in the atmosphere to form a sustained cloud layer\", \"the atmosphere cannot sustain a persistent cloud layer\")}.\r\n        |elif find(reportbody.planettype, \"class II\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(154)}}\r\n                {set tempmax to: {TempCalc(250)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of water vapors.  \r\n        |elif find(reportbody.planettype, \"class I\") >= 0:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(153)}}\r\n                {set tempmax to: {TempCalc(83)}}\r\n                surface temperatures of {Humanise(tempmax)} {tempscale} {Occasionally(2, OneOf(\", or less,\", \", at most,\"))} {OneOf(\"and\", \"with\", \"forming\")}\r\n             }\r\n             a dense cloud layer of ammonia vapor.  \r\n        }\r\n\r\n    |elif reportbody.atmosphere = \"No atmosphere\" || !reportbody.atmosphere:\r\n        {Occasionally(4, OneOf(\"There is no atmosphere.\", \"It is devoid of any atmosphere.\", \"The years have scoured it clean of any atmosphere.\"))}\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            The surface temperature averages\r\n            {TempCalc(reportbody.temperature)} {tempscale}.\r\n        }\r\n\r\n    |elif reportbody.pressure: \r\n        {if reportbody.pressure < 0.1:\r\n            {set pressdesc to OneOf(\"trace gas\", \"super thin\")}\r\n        |elif reportbody.pressure < 0.25:\r\n            {set pressdesc to \"very thin\"}\r\n        |elif reportbody.pressure < 0.5:\r\n            {set pressdesc to \"thin\"}\r\n        |elif reportbody.pressure < 2:\r\n            {set pressdesc to \"\"}\r\n        |elif reportbody.pressure < 10:\r\n            {set pressdesc to \"thick\"}\r\n        |elif reportbody.pressure < 50:\r\n            {set pressdesc to OneOf(\"dense\", \"very thick\")}\r\n        |elif reportbody.pressure < 100:\r\n            {set pressdesc to OneOf(\"very dense\", \"super thick\")}\r\n        |elif reportbody.pressure >= 100:\r\n            {set pressdesc to OneOf(\"crushing\", \"super dense\")}\r\n        }\r\n        {if find(reportbody.atmosphere, \"-rich\") >= 0:\r\n            {set element to token(reportbody.atmosphere, \"-rich\", \"\")}\r\n            {set desc to OneOf(\"I detect a \", \"There is a \", \"Sensors detect a\")}\r\n            {OneOf(\"{desc} {pressdesc} {reportbody.atmosphere} atmosphere\", \"The {pressdesc} atmosphere is {reportbody.atmosphere}\", \"The {pressdesc} atmosphere is rich in {element}\")}\r\n        |elif find(atmo, \"vapour\") >= 0:\r\n            {OneOf(\"The {pressdesc} atmosphere is composed of {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere is rich in {reportbody.atmosphere}s\", \"The {pressdesc} atmosphere contains high levels of {atmo}s\")}\r\n        |else:\r\n            {set mostly to OneOf(\"primarily\", \"mainly\", \"mostly\")}\r\n            {OneOf(\"The {pressdesc} atmosphere is composed {mostly} of\", \"Most prevalent in the {pressdesc} atmosphere is\")}\r\n            {reportbody.atmosphere}\r\n        }\r\n        { if reportAtmoPressure > 0:\r\n            with a surface pressure of {Humanise(reportbody.pressure)} Earth atmospheres\r\n        }\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            {set temp to: {TempCalc(reportbody.temperature)}}\r\n            with an average surface temperature of {temp} {tempscale}\r\n        }.\r\n    }\r\n}",
      "default": true,
      "name": "Body atmosphere report",
      "description": "Report on the atmosphere of the contextual body"
    },
    "Body mapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Mapping\", \"{Occasionally(2, \\\"Surface\\\")} Map\")}\r\n{Occasionally(2, \"of body {P(event.name)}\")}\r\n{OneOf(\"is\", \"is now\")}\r\n{OneOf(\"complete\", \"finished\")}.\r\n\r\n{if event.probesused <= event.efficiencytarget:\r\n    Efficiency bonus {OneOf(\"awarded\", \"granted\")}.\r\n}",
      "default": true,
      "name": "Body mapped",
      "description": "Triggered after mapping a body with the Surface Area Analysis scanner"
    },
    "Body materials report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportMats to 2} {_ Set to 0 if you want to hear about materials below your minimum inventory level _}\r\n                      {_ Set to 1 if you want to hear about materials below your desired inventory level _}\r\n                      {_ Set to 2 if you want to hear about all materials on the body _}\r\n\r\n{set reportMatConc to 0} {_ Set to 0 if you want to hear about good or great material percent concentrations _}\r\n                         {_ Set to 1 if you only want to hear about great material percent concentrations _}\r\n\r\n{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{_ Define a function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{if reportbody.landable:\r\n\r\n    {set goodmaterials to []}\r\n    {set greatmaterials to []}\r\n    {for material in reportbody.materials:\r\n        {set inventoryMat to _inventory(material.material)}\r\n        {if (reportMats >= 0 && inventoryMat.amount < inventoryMat.minimum && inventoryMat.minimum > 0)\r\n          || (reportMats >= 1 && inventoryMat.amount < inventoryMat.desired && inventoryMat.desired > 0)\r\n          || (reportMats >= 2):\r\n            {if material.percentage >= material.definition.greatpctbody:\r\n                {set greatmaterials to cat(greatmaterials, [material])}\r\n            |elif material.percentage >= material.definition.goodpctbody && reportMatConc != 1:\r\n                {set goodmaterials to cat(goodmaterials, [material])}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if len(goodmaterials) > 0 || len(greatmaterials) > 0:\r\n        This body contains\r\n    }\r\n\r\n    {if len(greatmaterials) > 0:\r\n        very high levels of\r\n        {if len(greatmaterials) = 1:\r\n            {greatmaterials[0].material}\r\n        |elif len(greatmaterials) = 2:\r\n            {greatmaterials[0].material} and {greatmaterials[1].material}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(greatmaterials):\r\n                {if cur = 0:\r\n                    {greatmaterials[cur].material}\r\n                |elif cur < len(greatmaterials) - 1:\r\n                    , {greatmaterials[cur].material}\r\n                |else:\r\n                    , and {greatmaterials[cur].material}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n    }\r\n    {if len(goodmaterials) > 0 && len(greatmaterials) > 0:\r\n        and\r\n    }\r\n\r\n    {if len(goodmaterials) > 0:\r\n        high levels of\r\n        {if len(goodmaterials) = 1:\r\n            {goodmaterials[0].material}\r\n        |elif len(goodmaterials) = 2:\r\n            {goodmaterials[0].material} and {goodmaterials[1].material}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(goodmaterials):\r\n                {if cur = 0:\r\n                    {goodmaterials[cur].material}\r\n                |elif cur < len(goodmaterials) - 1:\r\n                    , {goodmaterials[cur].material}\r\n                |else:\r\n                    , and {goodmaterials[cur].material}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n         }\r\n     }\r\n    {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\n        .\r\n    }\r\n}",
      "default": true,
      "name": "Body materials report",
      "description": "Report on the materials available from the contextual body"
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\n{set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\n{if !reportbody.name || reportbody.name = \"\": {set reportbody to BodyDetails(state.eddi_context_body_name)} }\n\n{if !reportbody.name || reportbody.name = \"\":\n    No consigo entender a que cuerpo estelar se refiere\n|else:\n    {set shortBodyName to reportbody.name}\n    {set systemName to state.eddi_context_body_system}\n    {set sysNameLen to len(systemName)}\n    {if len(shortBodyName) > sysNameLen && eq(systemName, slice(shortBodyName, 0, sysNameLen)):\n        {set shortBodyName to cat(\"planeta\", Spacialise(slice(shortBodyName, sysNameLen)))}\n    }\n\n    El {shortBodyName}, es\r\n\r\n{if reportbody.planettype = \"Metal rich body\":\r\nUn mundo rico en metales\r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"High metal content body\":\r\nUn mundo de alto contenido metálico \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Rocky body\":\r\nUn mundo rocoso \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Icy body\":\r\nUn mundo helado \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Rocky ice body\":\r\nUn mundo rocoso helado\r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Earthlike body\":\r\nUn mundo similar a la tierra \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Water world\":\r\nUn mundo acuático \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Ammonia world\":\r\nUn mundo de amoníaco \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Water giant\":\r\nun gigante acuático \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Water giant with life\":\r\nun gigante acuático con vida \r\n{set gasgiant to 0}\r\n|elif reportbody.planettype = \"Gas giant with water based life\":\r\nun gigante gaseoso con vida basada en el agua \r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Gas giant with ammonia based life\":\r\nun gigante gaseoso con vida basada en el amoníaco \r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class I gas giant\":\r\nun gigante gaseoso de clase uno\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class II gas giant\":\r\nun gigante gaseoso de clase dos\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class III gas giant\":\r\nun gigante gaseoso de clase tres\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class IV gas giant\":\r\nun gigante gaseoso de clase cuatro\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Sudarsky class V gas giant\":\r\nun gigante gaseoso de clase cinco\r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Helium rich gas giant\":\r\nun gigante gaseoso rico en helio \r\n{set gasgiant to 1}\r\n|elif reportbody.planettype = \"Helium gas giant\":\r\nun gigante gaseoso de helio\r\n{set gasgiant to 1}\r\n|else:\r\nun cuerpo estelar \r\n\r\n    }\r\n\n    {if reportbody.gravity < 0.5:\n        de baja gravedad\n    |elif reportbody.gravity <2:\n        de media gravedad\n    |elif reportbody.gravity <4:\n        de alta gravedad\n    |else:\n        de extrema gravedad\n    }\n\n    {if reportbody.tidallylocked:\n        carente de rotación\n    }\n\n    {if reportbody.terraformstate = \"Terraformable\":\n        terraformable\n    |elif reportbody.terraformstate = \"Terraformed\":\n        terraformado\n    }\n\n    {if len(reportbody.rings) > 0:\n        anillado\n    }\n\n    {if reportbody.terraformstate = \"Terraforming\":\n      en proceso de terraformación\n    }\n\n    {if type(reportbody.landable) != \"void\": \n        que es\n        {if reportbody.landable:\n            adecuado\n        |else:\n            inadecuado\n        }\n        para aterrizar\n    }\n    . {_ note the full stop}\n\n    {_ Atmosphere? }\n\n    {if reportbody.volcanism:\n        Este planeta muestra signos de vulcanismo, con\n        {if reportbody.volcanism.type = 'Geysers':\n            {if reportbody.volcanism.amount = 'Major':\n                un alto número de\n            |elif reportbody.volcanism.amount = 'Minor':\n                bajo número de\n            }\n            géiseres activos de {reportbody.volcanism.composition}\n        |else:\n            {if reportbody.volcanism.amount = 'Major':\n                altos niveles de\n            |elif reportbody.volcanism.amount = 'Minor':\n                bajos niveles de\n            }\n            afloramientos activos de magma de{reportbody.volcanism.composition}\n        }.\n    }\n\n    {if reportbody.landable :\n        Tiene un período de rotación\n        {if reportbody.rotationalperiod < -20.0:\n            retrógrado bajo\n        |elif reportbody.rotationalperiod < -0.5:\n            retrógrado\n        |elif reportbody.rotationalperiod < 0:\n            retrógrado alto\n        |elif reportbody.rotationalperiod <= 0.5:\n            alto\n        |elif reportbody.rotationalperiod > 20.0:\n            bajo\n        }\n        de {Humanise(reportbody.rotationalperiod)}\n        días {if Humanise(reportbody.rotationalperiod) != \"1\":s}.\n\n        {set goodmaterials to []}\n        {set greatmaterials to []}\n        {for material in reportbody.materials:\n            {if material.percentage >= MaterialDetails(material.material).greatpctbody:\n                {set greatmaterials to cat(greatmaterials, [material])}\n            |elif material.percentage >= MaterialDetails(material.material).goodpctbody:\n                {set goodmaterials to cat(goodmaterials, [material])}\n            }\n        }\n\n        {if len(greatmaterials) > 0:\n            Este cuerpo contiene niveles muy altos de\n            {if len(greatmaterials) = 1:\n                {greatmaterials[0].material}\n            |elif len(greatmaterials) = 2:\n                {greatmaterials[0].material} y {greatmaterials[1].material}\n            |else:\n                {set cur to 0}\n                {while cur < len(greatmaterials):\n                    {if cur = 0:\n                        {greatmaterials[cur].material}\n                    |elif cur < len(greatmaterials) - 1:\n                        , {greatmaterials[cur].material}\n                    |else:\n                        , and {greatmaterials[cur].material}\n                    }\n                    {set cur to cur + 1}\n                }\n            }\n        }\n        {if len(goodmaterials) > 0:\n            {if len(greatmaterials) > 0:\n                y altos niveles de\n            |else:\n                Este cuerpo contiene niveles altos de\n            }\n            {if len(goodmaterials) = 1:\n                {goodmaterials[0].material}\n            |elif len(goodmaterials) = 2:\n                {goodmaterials[0].material} y {goodmaterials[1].material}\n            |else:\n                {set cur to 0}\n                {while cur < len(goodmaterials):\n                    {if cur = 0:\n                        {goodmaterials[cur].material}\n                    |elif cur < len(goodmaterials) - 1:\n                        , {goodmaterials[cur].material}\n                    |else:\n                        , y {goodmaterials[cur].material}\n                    }\n                    {set cur to cur + 1}\n                }\n            }\n        }\n        {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\n            .\n        }\n    }\n}",
      "default": true,
      "name": "Body report",
      "description": "Informa sobre el contenido del cuerpo estelar"
    },
    "Body scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'body')}\n{SetState('eddi_context_last_action', 'scan')}\n{SetState('eddi_context_body_system', system.name)}\n{SetState('eddi_context_body_name', event.name)}\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\n\n{Pause(1000)}\n\n{OneOf(\"Escaneo\", \"Análisis\")} {OneOf(\"completado\", \"terminado\", \"finalizado\")}.\n\n{F(\"Body report\")}.\n\n{F(\"Report last scan value\")}\n\n\n",
      "default": true,
      "name": "Body scanned",
      "description": "Se activa cuando completas el escaneo de un cuerpo planetario"
    },
    "Body volcanism report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{if event: \r\n    {set reportbody to event} \r\n}\r\n{if !event.name || event.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which body you are asking about.\r\n|else:\r\n    {if (reportbody.volcanism || len(reportbody.volcanism) > 0) && reportVolcanism > 0:\r\n        {OneOf(\"I detect\", \"I am detecting\", \"Sensors detect\", \"This {reportbody.planettype} has\")}\r\n        {if reportbody.volcanism.type = \"Geysers\":\r\n            {if reportbody.volcanism.invariantAmount = 'Major':\r\n                high numbers of\r\n            |elif reportbody.volcanism.invariantAmount = 'Minor':\r\n                low numbers of\r\n            }\r\n            active {reportbody.volcanism.composition} geysers\r\n            {Occasionally(2, \"at the surface\")}\r\n        |else:\r\n            {if reportbody.volcanism.invariantAmount = 'Major':\r\n                high levels of\r\n            |elif reportbody.volcanism.invariantAmount = 'Minor':\r\n                low levels  of\r\n            }\r\n            active {reportbody.volcanism.composition} lava flows\r\n            {Occasionally(2, \"at the surface\")}\r\n        }.\r\n    }\r\n}",
      "default": true,
      "name": "Body volcanism report",
      "description": "Report on the volcanism of the contextual body"
    },
    "Bond awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Bond awarded }\n{_ Triggered when you are awarded a combat bond }\n\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'bond')}\n{SetState('eddi_context_last_action', 'award')}\n{SetState('eddi_context_bond_amount', event.reward)}\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\n\nNave de {event.victimfaction} {OneOf(\"destruida\",\"eliminada\",\"derribada\")},\n\n{event.reward} créditos otorgados de {event.awardingfaction}.\n",
      "default": true,
      "name": "Bond awarded",
      "description": "Se activa cuando se otorga un bono de combate"
    },
    "Bond redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'bond')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_bond_amount', event.amount)}\n\nBonos de combate por valor de {Humanise(event.amount)} créditos \n{Occasionally(2, OneOf(\"han sido\", \"\"))} \n{OneOf(\"otorgados\", \"reclamados\")} \n\n{Occasionally(2, \"\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\n    de {P(event.rewards[0].faction)}\n  |else:\n    . \n    {set cur to 0}\n    {while cur < len(event.rewards):\n      {if len(event.rewards[cur].faction) > 0:\n        {if cur = 0:\n        |elif cur < len(event.rewards) - 1:\n            , \n        |else:\n            y\n        }\n        {Humanise(event.rewards[cur].amount)} créditos de\n        {P(event.rewards[cur].faction)} \n        {set cur to cur + 1}\n      }\n    }\n  }\n\")}\n\n{if event.brokerpercentage && event.brokerpercentage > 0:\n    después de deducir \n    {OneOf(\"un pago\", \"una recompensa\")} de\n    {round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0)} créditos\n}.",
      "default": false,
      "name": "Bond redeemed",
      "description": "Se activa cuando canjeas un bono de combate"
    },
    "Bounty awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n    Recibido bono de recompensa de {event.reward} créditos por parte de la facción {event.rewards[0].faction}\r\n|elif len(event.rewards) > 1:\r\n    Recibidos {len(event.rewards)} bonos de recompensa por un total de {event.reward} créditos\r\n}\r\n{if event.shared:\r\n    para repartir entre sus compañeros de escuadrón y usted.\r\n}.\r\n",
      "default": true,
      "name": "Bounty awarded",
      "description": "Se activa cuando te sumas una recompensa"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\nLa facción {event.faction} acaba de poner una recompensa de {event.bounty} créditos por nuestra cabeza.",
      "default": true,
      "name": "Bounty incurred",
      "description": "Se activa cuando te ponen una recompensa"
    },
    "Bounty redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'bond')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_bond_amount', event.amount)}\n\n\n{OneOf(\"Otorgados\", \"Reclamados\")}\nbonos de combate por valor de {(event.amount)} créditos\n\n{Occasionally(2, \"\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\n    de {P(event.rewards[0].faction)}\n  |else:\n    . \n    {set cur to 0}\n    {while cur < len(event.rewards):\n      {if len(event.rewards[cur].faction) > 0:\n        {if cur = 0:\n        |elif cur < len(event.rewards) - 1:\n            , \n        |else:\n            y\n        }\n        {(event.rewards[cur].amount)} créditos de\n        {P(event.rewards[cur].faction)} \n        {set cur to cur + 1}\n      }\n    }\n  }\n\")}\n\n{if event.brokerpercentage && event.brokerpercentage > 0:\n    después de deducir \n    {OneOf(\"un pago\", \"una recompensa\")} de\n    {round((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage, 0)} créditos\n}.",
      "default": true,
      "name": "Bounty redeemed",
      "description": "Se activa cuando cobras una recompensa"
    },
    "Cargo depot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo depot }\r\n{_ Triggered when collecting or delivering cargo for a wing mission }\r\n\r\n\r\n{if event.updatetype = \"Collect\":\r\n    You have collected {event.amount} tonne{if event.amount != 1:s} of {event.commodity} from the mission depot.\r\n|elif event.updatetype = \"Deliver\":\r\n    You have delivered {event.amount} tonne{if event.amount != 1:s} of {event.commodity} to the mission depot.\r\n}\r\n\r\n{if event.updatetype != \"WingUpdate\":\r\n    {Pause(500)}\r\n    {set remaining to event.totaltodeliver - event.delivered}\r\n    {if remaining = 0:\r\n        Wing mission requirements are now completed.\r\n    |elif event.updatetype = \"Deliver\":\r\n        Wing mission is now {round(event.delivered / event.totaltodeliver * 100, 0)} percent complete.\r\n    }\r\n}",
      "default": true,
      "name": "Cargo depot",
      "description": "Triggered when collecting or delivering cargo for a wing mission"
    },
    "Cargo inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Cargo inventory",
      "description": "Se activa cuando obtienes un inventario de tu cargamento"
    },
    "Cargo report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Cargo report }\n{_ Report current cargo manifest }\n\n{set cargocarried to 0}\n{set haulage to 0}\n{set illegal to false}\n{set stolen to false}\n\n{if len(inventory) > 0:\n    {for cargo in inventory:\n        {set cargocarried to cargocarried + cargo.total}\n        {set haulage to haulage + cargo.haulage}\n        {if cargo.stolen > 0: {set stolen to true}}\n        {if status.docked:\n            {for prohibited in station.prohibited:\n                {if cargo.name = prohibited: {set illegal to true}}\n            }\n        }\n    }\n}\n\n\n{if cargocarried > 0:\n    {if cargocarried = ship.cargocapacity:\n        {OneOf(\"La bodega de carga está llena\", \"el compartimento de carga está lleno\")}.\n    |else:\n        {Occasionally(2, \"Ahora mismo\")} {OneOf(\"llevamos\", \"transportamos\")} \n    }\n\n    {if len(inventory) = 1:\n        {if inventory[0].name = \"Drón\":\n            {if cargocarried = 1:un |else:{cargocarried}} drón{if cargocarried != 1:es}.\n        |else:\n           {if cargocarried = 1:una |else:{cargocarried}} tonelada{if cargocarried != 1:s} de {inventory[0].name}.\n        }\n    |else:\n        {if cargocarried < ship.cargocapacity: de cargamento.}\n        {OneOf(\"la siguiente mercancía\",\"lo siguiente\")}.\n        {set position to 0}\n        {for cargo in inventory:\n            \n            {if cargo.name = \"Drón\":\n                 {if cargo.total = 1:un |else:{cargo.total}} drón{if cargo.total != 1:es}\n            |else:\n               {if cargo.total = 1:una |else:{cargo.total}} tonelada{if cargo.total != 1:s} de {cargo.name}\n            }\n            {set position to position + 1}\n            {if position = len(inventory) - 1: , y |else:,}\n        }\n    }.\n\n    {if cargocarried < ship.cargocapacity:\n        {set free to ship.cargocapacity - cargocarried}\n        Tienes {free} tonelada{if free != 1:s} {OneOf(\"\",\"de espacio libre\")}{if free != 1:s}.\n    }\n\n    {if stolen || illegal:\n        Atención: Llevamos carga\n        {if stolen: robada}\n        {if illegal:\n            {if stolen:, e }\n            ilegal en esta jurisdicción\n        }.\n    }\n\n|else:\n    {OneOf(\"Tu bahía de carga está vacía.\",\"Tu bodega de carga está vacía.\",\"No tienes carga.\",\"No llevas ninguna carga.\")}\n}\n\n",
      "default": true,
      "name": "Cargo report",
      "description": "Informa de tu carga actual"
    },
    "Cargo updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo updated }\r\n{_ Triggered when the cargo inventory is updated }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'cargo')}\r\n{SetState('eddi_context_last_action', 'updated')}\r\n{SetState('eddi_context_cargo_carried', event.cargocarried)}\r\n",
      "default": true,
      "name": "Cargo updated",
      "description": "Activado cuando se actualiza el inventario de carga"
    },
    "Cargo wingupdate": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo wingupdate }\r\n{_ Triggered when a wing-mate collects or delivers cargo for a wing mission }\r\n\r\n\r\n{if event.updatetype = \"Collect\":\r\n    Your wing mate has collected {event.amount} tonne{if event.amount != 1:s}\r\n    {if event.commodity != \"Unknown\": of {event.commodity}} from the mission depot.\r\n|elif event.updatetype = \"Deliver\":\r\n    Your wing mate has delivered {event.amount} tonne{if event.amount != 1:s} \r\n    {if event.commodity != \"Unknown\": of {event.commodity}} to the mission depot.\r\n}\r\n\r\n{Pause(500)}\r\n{set remaining to event.totaltodeliver - event.delivered}\r\n{if remaining = 0:\r\n    Wing mission requirements are now completed.\r\n|elif event.updatetype = \"Deliver\":\r\n    Wing mission is now {round(event.delivered / event.totaltodeliver * 100, 0)} percent complete.\r\n}\r\n",
      "default": true,
      "name": "Cargo wingupdate",
      "description": "Triggered when a wing-mate collects or delivers cargo for a wing mission"
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'save')}\n{SetState('eddi_context_last_action', 'clear')}\n\nAdiós {F(\"Honorific\")}. Ha sido un verdadero honor.",
      "default": true,
      "name": "Cleared save",
      "description": "Se activa cuando eliminas tu partida"
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'cockpit')}\n{SetState('eddi_context_last_action', 'breach')}\n\n{OneOf(\"¿Soy yo? ¿o aquí hacemuchofrío?\",\"Atención. Cristal de cabina destruido. Activando módulo de supervivencia.\")}",
      "default": true,
      "name": "Cockpit breached",
      "description": "Se activa cuando se rompe la cabina de la nave"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\n{F(\"Honorific\")}, se ha reconocido su habilidad de combate.",
      "default": true,
      "name": "Combat promotion",
      "description": "Se activa cuando aumenta tu rango de combate."
    },
    "Commander continued": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "Bienvenido de nuevo {F(\"Honorific\")}.",
      "default": true,
      "name": "Commander continued",
      "description": "Se activa cuando cargas una partida guardada"
    },
    "Commander progress": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander progress",
      "description": "Se activa cuando se informa de tu progreso"
    },
    "Commander ratings": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander ratings",
      "description": "Se activa cuando se informa de tu clasificación"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Bienvenido, comandante.",
      "default": true,
      "name": "Commander started",
      "description": "Se activa cuando empiezas una partida nueva"
    },
    "Commodity collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'collect')}\n{SetState('eddi_context_cargo_name', event.commodity)}\n\n{event.commodity} a bordo.",
      "default": true,
      "name": "Commodity collected",
      "description": "Se activa cuando recoges mercancia con tu nave o VRS"
    },
    "Commodity ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n",
      "default": true,
      "name": "Commodity ejected",
      "description": "Se activa cuando expulsas mercancia de tu nave o VRS"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for commodity in station.commodities:\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\n        {set discount to commodity.avgprice - commodity.buyprice}\n        {if discount > best.avgprice - best.buyprice:\n            {set thirdbest to secondbest}\n            {set secondbest to best}\n            {set best to commodity}\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\n            {set thirdbest to secondbest}\n            {set secondbest to commodity}\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\n            {set thirdbest to commodity}\n        }\n    }\n}\n\n{if best:\n    El mercado local está vendiendo {best.name} al mejor precio\n    {if secondbest\n       ,, además de {secondbest.name}\n        {if thirdbest:\n            y {thirdbest.name}\n        }\n    }\n.}\n\n",
      "default": true,
      "name": "Commodity purchase check",
      "description": "Verifica que mercancías son las mejores para adquirir"
    },
    "Commodity purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'purchase')}\n{SetState('eddi_context_commodity_name', event.commodity)}\n{SetState('eddi_context_commodity_amount', event.amount)}\n\n{if event.amount = 1:\n {OneOf(\"Ha comprado\",\"Adquirida\")} una tonelada de {event.commodity} por {event.price} créditos.\n|elif event.amount > 1:\n {OneOf(\"Ha comprado\",\"Adquiridas\")} {event.amount} toneladas de {event.commodity} por {event.price} créditos cada una, con un coste total de {event.amount * event.price} créditos.\n}",
      "default": true,
      "name": "Commodity purchased",
      "description": "Se activa cuando compras cualquier producto del mercado local"
    },
    "Commodity refined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'refine')}\n{SetState('eddi_context_commodity_name', event.commodity)}\n\nUna tonelada de {event.commodity} refinada.",
      "default": true,
      "name": "Commodity refined",
      "description": "Se activa cuando se refina un producto"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given commodity in market}\n{set market(commodity) to:\n    {for marketcommodity in station.commodities:\n        {if marketcommodity.EDDBID = commodity.EDDBID:\n            {return marketcommodity}\n        }\n    }\n}\n\n{set totalprofit to 0}\n{set missioncommodities to []}\n{set profitablecommodities to []}\n{set stolencommodities to []}\n{set unknowncommodities to []}\n\n{for cargo in inventory:\n    {if cargo.name != 'Limpet':\n        {set marketcommodity to market(cargo.commodity)}\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.other}\n\n        {if cargo.stolen > 0:\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\n        |elif cargo.haulage > 0:\n            {set missioncommodities to cat(missioncommodities, [cargo.commodity])}\n        |elif !marketcommodity:\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\n        |elif marketcommodity && profit > 0:\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\n            {set totalprofit to totalprofit + profit}\n        }\n    }\n}\n\n{_ Let the user know about any commodities they can sell here for a profit}\n{if len(profitablecommodities) > 0:\n    Puede vender su\n    {if len(profitablecommodities) = 1:\n        {profitablecommodities[0].name}\n    |elif len(profitablecommodities) = 2:\n        {profitablecommodities[0].name} y {profitablecommodities[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(profitablecommodities):\n            {if cur = 0:\n                {profitablecommodities[cur].name}\n            |elif cur < len(profitablecommodities) - 1:\n                , {profitablecommodities[cur].name}\n            |else:\n                , y {profitablecommodities[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }\n    con un beneficio de {totalprofit} créditos.\n}\n\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\n{if len(unknowncommodities) > 0:\n    {if len(profitablecommodities) > 0: Además también }Podría vender\n    {if len(unknowncommodities) = 1:\n        {unknowncommodities[0].name}\n    |elif len(unknowncommodities) = 2:\n        {unknowncommodities[0].name} y {unknowncommodities[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(unknowncommodities):\n            {if cur = 0:\n                {unknowncommodities[cur].name}\n            |elif cur < len(profitablecommodities) - 1:\n                , {unknowncommodities[cur].name}\n            |else:\n                , y {unknowncommodities[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }\n    , aunque  antes mejor verifique el magen de beneficio de {if len(unknowncommodities) > 1: ésta |else: éstas} antes de confirmar la transacción.\n}\n\n{_ Let the user know about any stolen commodities they can sell on the black market}\n{if len(stolencommodities) > 0:\n    {if station.hasblackmarket:\n        Puede deshacerse aquí de los bultos de \n        {if len(stolencommodities) = 1:\n            {stolencommodities[0].name}\n        |elif len(stolencommodities) = 2:\n            {stolencommodities[0].name} y{stolencommodities[1].name}\n        |else:\n            {set cur to 0}\n            {while cur < len(stolencommodities):\n                {if cur = 0:\n                    {stolencommodities[cur].name}\n                |elif cur < len(stolencommodities) - 1:\n                    , {stolencommodities[cur].name}\n                |else:\n                    , and {stolencommodities[cur].name}\n                }\n                {set cur to cur + 1}\n            }\n        }\n        robados.\n    |else:\n        Recuerde que llevamos a bordo {OneOf(\"mercancía robada\", \"bienes robados\", \"cargamento robado\", \"bultos marcados con propiedad ajena\")}.\n    }\n}\n\n{_ Let the user know about any mission related commodities they can sell on the black market}\n{if len(missioncommodities) > 0 && station.hasblackmarket:\n\n    Puede {if len(stolencommodities) > 0: además} {OneOf('descargar', 'entregar')} aquí sus paquetes de\n    {if len(missioncommodities) = 1:\n        {missioncommodities[0].name}\n    |elif len(missioncommodities) = 2:\n        {missioncommodities[0].name} and {missioncommodities[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(missioncommodities):\n            {if cur = 0:\n                {missioncommodities[cur].name}\n            |elif cur < len(missioncommodities) - 1:\n                , {missioncommodities[cur].name}\n            |else:\n                , y {missioncommodities[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }\n    de la misión.\n}\n",
      "default": true,
      "name": "Commodity sale check",
      "description": "Comprueba que mercancías se pueden vender en el mercado local"
    },
    "Commodity sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'commodity')}\n{SetState('eddi_context_last_action', 'sell')}\n{SetState('eddi_context_commodity_name', event.commodity)}\n{SetState('eddi_context_commodity_amount', event.amount)}\n\n{if event.amount = 1:\n   Ha vendido una sola tonelada de {event.commodity} por {event.price} créditos\n|elif event.amount > 1:\n    Vendidas {event.amount} toneladas de {event.commodity} a {event.price} créditos cada una por un total de {event.amount * event.price} créditos\n}\n{if event.price != event.profit:\n    {if event.profit < 0:\n       , con una pérdida de {-1 * event.profit * event.amount} créditos.\n    |elif event.profit = 0:\n        al mismo precio de su compra.\n    |else:\n       , con un beneficio de {event.profit * event.amount} créditos.\n    }\n}",
      "default": true,
      "name": "Commodity sold",
      "description": "Se activa cuando vende mercancía."
    },
    "Community goal": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set Context _}\n{SetState('eddi_context_last_subject', 'community goal')}\n{_ Save goal location to context if there is only one goal present _}\n{if len(event.cgid) = 1:\n   {SetState('eddi_context_goal_system_name', event.system[0])}\n   {SetState('eddi_context_goal_station_name', event.station[0])}\n}\n\n{F('Honorific')}, \n\n{if len(event.name) > 1:\n    {OneOf(\"ha expresado su interés en\", \"estoy siguiendo\")}\n    los siguientes eventos de la comunidad:\n|else: \n    El evento de la comunidad,    \n}\n\n{set cur to 0}\n{while cur < len(event.name):\n\n   {if cur = 0 && len(event.name) = 1:\n      {_ nothing _}\n   |elif cur = 0 && len(event.name) > 1:\n      El primero,\n   |elif cur < (len(event.name) - 1):\n      el siguiente, \n   |else:\n      el último,\n   }\n\n   {event.name[cur]},\n\n   {if event.iscomplete[cur]:\n      {OneOf(\"está completado\", \"ha finalizado\")} \n   |else: \n      {if (event.expiry[cur] / 3600) < 12:\n         {OneOf(\"está a punto de terminar\", \n                \"terminará en {round(event.expiry[cur] / 3600, 1)} horas\", \n                \"está casi completado\")}\n      |else:\n         {OneOf(\"no se ha completado aun,\", \n                \"está activo\", \n                \"está incompleto\")} \n      }\n   }\n\n   {if event.tier[cur]:\n       {OneOf(\"y ha alcanzado el\", \"y está ahora mismo en el\")} {event.tier[cur]}.\n       {if event.contribution[cur] > 0:\n           Su recompensa asignada está\n           {Occasionally(2, \" actualmente \")}\n           {Occasionally(2, \"calculada \")}\n           en {event.tierreward[cur]} créditos\n           {Occasionally(2, \"en el {event.percentileband[cur]} por ciento\")}\n       }\n   }.\n\n   {_ Create a comparison function _}\n   {set compare(stat) to:     \n       {if stat < 0.01:\n            solo una fracción de            \n       |elif stat < 0.10:\n            menos de un décimo de \n       |elif stat < 0.25:\n            menos de un cuarto de\n       |elif stat < 0.5:\n            menos de la mitad de\n       |elif stat < 0.75:\n            menos de\n       |elif stat < 0.96: \n            {OneOf(\"apenas un poco\",\"ligeramente\")}\n            menos de\n       |elif stat < 1.05:\n            {OneOf(\"aproximádamente\",\"casi\")} \n            igual a \n       |elif stat < 1.25:\n            un poco más de \n       |elif stat < 1.5:\n            más de \n       |elif stat < 2:\n            significativamente más de\n       |else:\n            bastante más de\n       }\n    }\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\n\n    {if compare_contribution != 0:\n       {if event.toprank[cur]: \n          Enhorabuena! \n          Es usted uno de los {event.topranksize[cur]} mejores comandantes en este evento, habiendo contribuido con \n          {compare(compare_contribution)}\n          la media.\n       |else:\n          {Occasionally(2, \"Ha contribuido con \n          {compare(compare_contribution)}\n          la media.\")}\n       }\n    }\n\n    {if !event.iscomplete[cur]:\n       Puede \n       {if event.contribution[cur] > 0: \n          {OneOf(\"contribuir más\", \"hacer contribuciones adicionales\")} \n       |else: \n          {OneOf(\"contribuir\", \"hacer una contribución\")}\n       }\n       {if event.station[cur] = station.name:\n          {Occasionally(2, \"aquí\")}\n          {Occasionally(2, \"en esta estación\")}.\n       |elif event.system[cur] = system.name:\n          en {event.station[cur]}\n          {Occasionally(2, \"aquí\")}\n          {Occasionally(2, \"en este sistema\", \"en el sistema donde nos encontramos\")}.\n       |else:\n          en {event.station[cur]},\n          en {OneOf(\"{event.system[cur]}\", \"el sistema {event.system[cur]}\" )}.\n       }\n    }\n\n    {set cur to cur + 1}\n    {Pause(1000)}\n}",
      "default": true,
      "name": "Community goal",
      "description": "Se activa cuando se comprueba el estado de los objetivos de la comunidad"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"enlace neural\", \"enlace\")} {Occasionally(2, \"con el caza\")} {OneOf(\"iniciado\", \"establecido\", \"fijado\")}.",
      "default": true,
      "name": "Controlling fighter",
      "description": "Se activa cuando cambias el control de tu nave al de tu caza."
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Enlace neural\", \"enlace\", \"enlace\")} {OneOf(\"terminado\", \"desconectado\")}.",
      "default": true,
      "name": "Controlling ship",
      "description": "Se activa cuando cambias del control de tu caza al de tu nave"
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = \"Active\":\r\n    {event.name} está ahora en servicio activo.\r\n|else:\r\n    {event.name} retirandose del servicio activo.\r\n}",
      "default": true,
      "name": "Crew assigned",
      "description": "Se activa cuando asignas a alguien a tu tripulación"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'fire')}\n{SetState('eddi_context_crew_name', event.name)}\n\n{event.name} {OneOf(\"ha sido despedido\",\"ya no forma parte de la tripulación\")}.",
      "default": true,
      "name": "Crew fired",
      "description": "Se activa cuando despides a alguien de tu tripulación"
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'hire')}\n{SetState('eddi_context_crew_name', event.name)}\n\n{event.name} {OneOf(\"se ha unido a la tripulación\",\"ha sido contratado a su tripulación\")}.",
      "default": true,
      "name": "Crew hired",
      "description": "Se activa cuando contratas a alguien a tu tripulación"
    },
    "Crew joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'join')}\n{SetState('eddi_context_crew_name', event.captain)}\n\nNos hemos unido a la tripulación del comandante {slice (event.captain,10)}. {OneOf(\"No se preocupe, yo me encargo de {ShipName()}\",\"\")}.",
      "default": true,
      "name": "Crew joined",
      "description": "Se activa cuando te unes a una tripulación"
    },
    "Crew left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'leave')}\n{SetState('eddi_context_crew_name', event.captain)}\n\nHemos abandonado la tripulación del comandante {slice (event.captain,10)}.",
      "default": true,
      "name": "Crew left",
      "description": "Se activa cuando sales de una tripulación"
    },
    "Crew member joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nEl comandante {slice (event.crew,10)} se ha unido a su tripulación.",
      "default": true,
      "name": "Crew member joined",
      "description": "Se activa cuando un comandante se une a tu tripulación"
    },
    "Crew member launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'launch')}\n{SetState('eddi_context_crew_name', event.crew)}\n\n{event.crew} ha lanzado un caza..",
      "default": true,
      "name": "Crew member launched",
      "description": "Se activa cuando un miembro de tu tripulación lanza el caza"
    },
    "Crew member left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'leave')}\n{SetState('eddi_context_crew_name', event.crew)}\n\nEl comandante {slice (event.crew,10)} ha abandonado la tripulación.",
      "default": true,
      "name": "Crew member left",
      "description": "Se activa cuando un comandante deja tu tripulación"
    },
    "Crew member removed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'remove')}\n{SetState('eddi_context_crew_name', event.crew)}\n\nHa {OneOf(\"expulsado\",\"despedido\")} al comandante {slice (event.crew,10)} de la tripulación.",
      "default": true,
      "name": "Crew member removed",
      "description": "Se activa cuando despides a un comandante de tu tripulación"
    },
    "Crew member role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'crew')}\n{SetState('eddi_context_last_action', 'role')}\n{SetState('eddi_context_crew_name', event.crew)}\n{SetState('eddi_context_crew_role', event.role)}\n\n{if event.role = 'Idle':\n    {event.crew} está desocupado\n|elif event.role = 'Fighter':\n    {event.crew} está controlando un caza\n|elif event.role = 'Gunner':\n    {event.crew} está de artillero\n}.\n",
      "default": true,
      "name": "Crew member role changed",
      "description": "Se activa cuando un miembro de tu tripulación cambia su rol"
    },
    "Crew role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = 'Gunner':\n  {OneOf(\"Ha adoptado\",\"Se le ha asignado\")} la posición de artillero en esta tripulación.\n|elif event.role = 'Fighter':\n  {OneOf(\"Ha adoptado ser\",\"Se le ha asignado ser\")} piloto de caza en esta tripulación.\n|elif event.role = 'Idle':\n  Ha sido desasignado del servicio activo.\n}",
      "default": true,
      "name": "Crew role changed",
      "description": "Se activa cuando cambia tu rol en una tripulación"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Track if there is any damage}\n{set damaged to 0}\n\n{_ Announce hull health}\n{if ship.health < 100:\n    Casco al {Humanise(ship.health)} %.\n    {set damaged to 1}\n}\n\n{_ Announce critical module health}\n\n{set minordamage to []}\n{set majordamage to []}\n\n{if ship.powerplant.health < 60:\n    {set majordamage to cat(majordamage, [ship.powerplant])}\n|elif ship.powerplant.health < 100:\n    {set minordamage to cat(minordamage, [ship.powerplant])}\n}\n\n{if ship.thrusters.health < 60:\n    {set majordamage to cat(majordamage, [ship.thrusters])}\n|elif ship.thrusters.health < 100:\n    {set minordamage to cat(minordamage, [ship.thrusters])}\n}\n\n{if ship.frameshiftdrive.health < 60:\n    {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\n|elif ship.frameshiftdrive.health < 100:\n    {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\n}\n\n{if ship.powerdistributor.health < 60:\n    {set majordamage to cat(majordamage, [ship.powerdistributor])}\n|elif ship.powerdistributor.health < 100:\n    {set minordamage to cat(minordamage, [ship.powerdistributor])}\n}\n\n{if ship.lifesupport.health < 60:\n    {set majordamage to cat(majordamage, [ship.lifesupport])}\n|elif ship.lifesupport.health < 100:\n    {set minordamage to cat(minordamage, [ship.lifesupport])}\n}\n\n{if ship.sensors.health < 60:\n    {set majordamage to cat(majordamage, [ship.sensors])}\n|elif ship.sensors.health < 100:\n    {set minordamage to cat(minordamage, [ship.sensors])}\n}\n\n{if len(majordamage) > 0:\n    {set damaged to 1}\n    Grandes daños en\n    {if len(majordamage) = 1:\n        {majordamage[0].name}\n    |elif len(majordamage) = 2:\n        {majordamage[0].name} y {majordamage[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(majordamage):\n            {if cur = 0:\n                {majordamage[cur].name}\n            |elif cur < len(majordamage) - 1:\n                , {majordamage[cur].name}\n            |else:\n                , y {majordamage[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n}\n\n{if len(minordamage) > 0:\n    {set damaged to 1}\n    Algunos desperfectos en\n    {if len(minordamage) = 1:\n        {minordamage[0].name}\n    |elif len(minordamage) = 2:\n        {minordamage[0].name} y {minordamage[1].name}\n    |else:\n        {set cur to 0}\n        {while cur < len(minordamage):\n            {if cur = 0:\n                {minordamage[cur].name}\n            |elif cur < len(minordamage) - 1:\n                , {minordamage[cur].name}\n            |else:\n                , y {minordamage[cur].name}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n}\n\n{_ Announce other module health}\n\n{set minordamage to []}\n{set majordamage to []}\n\n{for compartment in ship.compartments:\n    {if compartment.module.health < 60:\n        {set majordamage to cat(majordamage, [compartment.module.name])}\n    |elif hardpoint.module.health < 100:\n        {set minordamage to cat(minordamage, [compartment.module.name])}\n    }\n}\n\n{for hardpoint in ship.hardpoints:\n    {if hardpoint.module.health < 60:\n        {set majordamage to cat(majordamage, [hardpoint.module.name])}\n    |elif hardpoint.module.health < 100:\n        {set minordamage to cat(minordamage, [hardpiont.module.name])}\n    }\n}\n\n{if len(majordamage) > 0:\n    {set damaged to 1}\n    {if len(majordamage) = 1:\n       Otro componente de la nave con importantes desperfectos\n    |elif len(majordamage) > 1:\n        {len(majordamage)} otros componentes de la nave con importantes desperfectos\n    }\n    {if len(minordamage) = 1:\n       y otro componente de la nave con algun desperfecto\n    |elif len(minordamage) > 1:\n       y otros {len(minordamage)} componentes de la nave con daños menores\n    }.\n|elif len(minordamage) = 1:\n    {set damaged to 1}\n    Otro componente de la nave con daños menores.\n|elif len(minordamage) > 1:\n    {set damaged to 1}\n    {len(minordamage)} otros componentes de la nave con daños menores.\n}\n\n{if damaged = 0:\n    {OneOf(\"Todos los sistemas completamente operativos.\", \"{ShipName()} está completamente operativa.\", \"{ShipName()} no presenta daños.\")}\n}",
      "default": true,
      "name": "Damage check",
      "description": "Comprueba los daños de tu nave"
    },
    "Data scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Data scanned }\n{_ Triggered when scanning some types of data links }\n\n\n{_ Context }\n{SetState('eddi_context_last_subject', 'scan')}\n{SetState('eddi_context_last_action', 'data')}\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\n\nAnálisis de {event.datalinktype} completado.",
      "default": true,
      "name": "Data scanned",
      "description": "Se activa cuando se escanean algunos tipos de enlaces de datos."
    },
    "Data voucher awarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Data voucher awarded }\r\n{_ Triggered when you are awarded a data voucher }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\nOtorgado bono de datos de {event.payeefaction} por {event.reward} créditos.\r\n",
      "default": true,
      "name": "Data voucher awarded",
      "description": "Se activa cuando te otorgan un bono de datos."
    },
    "Data voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'data_voucher')}\n{SetState('eddi_context_last_action', 'redeem')}\n{SetState('eddi_context_data_voucher_amount', event.amount)}\n\n{if len event.rewards > 1: {OneOf(\"Reclamados\", \"Adquiridos\")} Bonos de datos\n|else: {OneOf(\"Reclamado\", \"Adquirido\")} un bono de datos} \npor {(event.amount)} créditos\n\n\n{Occasionally(2, \"\n  {if len(event.rewards) = 1 && len(event.rewards[0].faction) > 0:\n    {OneOf(\"de\", \"por cortesiia de\")}\n    {P(event.rewards[0].faction)}\n  |else:\n    {if len(event.rewards[0].faction) > 0:\n       {OneOf(\"de\", \"por cortesiia de\")}\n       {set cur to 0}\n       {while cur < len(event.rewards):\n          {if cur = 0:\n          |elif cur < len(event.rewards) - 1:\n              , \n          |else:\n              y\n          }\n          {P(event.rewards[cur].faction)}\n          {set cur to cur + 1}\n       }\n    }\n  }\n\")}.",
      "default": true,
      "name": "Data voucher redeemed",
      "description": "Se activa cuando reclamas bonos de datos"
    },
    "Datalink message": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Datalink message",
      "description": "Se activa al completar un escaneo de un enlace de datos"
    },
    "Died": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if len(event.ships) > 0:\n\n    {set commanders to []}\n    {for cmdr in event.commanders:\n        {if find(cmdr, \"$ShipName\") >= 0:\n           {_ Ignore NPC ships _}        \n        |else: \n           {set commanders to cat(commanders, [cmdr])}\n        }\n    }\n\n    {ShipName()} ha sido\n    \n    {OneOf(\"convertida en polvo\", \"eliminada\", \"destruida\")}\n\n    {if len(commanders) = 1:\n        por {commanders[0]} \n        en una {event.ships[0]} \n        con rango de combate {event.ratings[0]}.\n    |elif len(commanders) = 2:\n        por {commanders[0]} \n        en una {event.ships[0]}\n        con rango de combate {event.ratings[0]}, \n        y por {commanders[1]} \n        en una {event.ships[1]}\n        con rango de combate {event.ratings[1]}.\n    |elif len(commanders) > 2:\n        {set cur to 0}\n        por\n        {while cur < len(commanders):\n            {if cur = 0:\n                {commanders[cur]} \n                en una {event.ships[cur]} \n                con rango de combate {event.ratings[cur]}\n            |elif cur < len(commanders) - 1:\n                , {commanders[cur]} \n                en una {event.ships[cur]} \n                con rango de combate {event.ratings[cur]}\n            |else:\n                , y {commanders[cur]} \n                en una {event.ships[cur]} \n                con rango de combate {event.ratings[cur]}.\n            }\n            {set cur to cur + 1}\n        }\n    }\n}. Activada cápsula de escápe. Emitiendo señal de socorro. {OneOf(\"Pronto... vendrán a buscarnos\",\"\")}.",
      "default": true,
      "name": "Died",
      "description": "Se activa cuando mueres"
    },
    "Discovery scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ This event currently is being written to the journal about 15 seconds after a discovery \"honk\" is completed. _}\r\n{_ Due to the extreme delay between the triggering action and the actual event, we are omitting any default script for the time being. _}",
      "default": true,
      "name": "Discovery scan",
      "description": "Triggered when performing a full system scan (honk)"
    },
    "Docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.state = \"Damaged\": Emergency}\nAnclaje completado.",
      "default": true,
      "name": "Docked",
      "description": "Se activa cuando su nave aterriza en una estación espacial o puesto avanzado"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Solicitud de aterrizaje cancelada.",
      "default": true,
      "name": "Docking cancelled",
      "description": "Se activa cuando su nave cancela el aterrizaje solicitado en una estación espacial o puesto avanzado"
    },
    "Docking denied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\n\n{OneOf('Hemos recibido una denegación del permiso de aterrizaje','Se nos ha denegado el permiso de aterrizaje','nos informan de que no pueden darnos permiso para aterrizar')}\n\n{if event.reason = \"ActiveFighter\":\n    porque nuestro caza está desplegado\n|elif event.reason = \"Distance\":\n    {OneOf('porque estamos demasiado lejos de la estación','Porque no hemos alcanzado la distancia mínima a la estación')}{OneOf (' ',' ','. Debemos acercarnos al menos a sietemil quinientos metros')}\n|elif event.reason = \"Hostile\":\n    {OneOf('porque a la facción que controla la estación no le gustamos','porque la facción que controla la estación nos considera hostiles')}\n|elif event.reason = \"NoSpace\":\n        {OneOf('porque no hay espacio disponible','porque todas las plataformas están ocupadas','porque no hay plataformas libres del tamaño adecuedo')}{OneOf (' ',' ','. Debemos esperar a que quede una plataforma libre')}\n|elif event.reason = \"Offences\":\n    porque hemos cometido una ofensa contra ellos recientemente\n|elif event.reason = \"TooLarge\":\n    porque no hay pistas de aterrizaje de tamaño suficiente para albergar esta nave\n}.",
      "default": true,
      "name": "Docking denied",
      "description": "Se activa cuando a su nave le es denegado el aterrizaje en una estación espacial o puesto avanzado"
    },
    "Docking granted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'landing pad')}\n{SetState('eddi_context_landing_pad_system', system.name)}\n{SetState('eddi_context_landing_pad_station', event.station)}\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\n\n{set station to StationDetails(event.station)}\n{if station.model = \"Estación clase Coriolis\" || station.model = \"Estación clase Orbis\" || station.model = \"Estación clase Ocellus\" || station.model = \"Base en asteroide\" || station.model = \"Estación desconocida\":\n    {Pause(8000)}\n    {F(\"Informe de plataforma de aterrizaje\")}\n}",
      "default": true,
      "name": "Docking granted",
      "description": "Se activa cuando se te concede permiso a tu nave para aterrizar en una estación espacial o puesto avanzado"
    },
    "Docking requested": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Docking requested",
      "description": "Se activa cuando tu nave solicita el aterrizaje en una estación espacial o puesto avanzado"
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf ('No recibimos respuesta a nuestra solicitud de aterrizaje','la estación no ha respondido a nuestra solicitud de aterrizaje')}.",
      "default": true,
      "name": "Docking timed out",
      "description": "Se activa cuando tu solicitud de aterrizaje expira"
    },
    "Empire honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Forms of address taken from <https://en.wikipedia.org/wiki/Forms_of_address_in_the_United_Kingdom>}\n{if cmdr.empirerating.rank <= 4: {_ Commoner }\n   Comandante\n|elif cmdr.empirerating.rank = 5: {_ Knight / Dame }\n    {if cmdr.gender = \"Hombre\": \n        señor\n    |elif cmdr.gender = \"Mujer\": \n        madám\n    |else: \n        Comandante\n    }\n|elif cmdr.empirerating.rank <= 11: {_ Peer / Peeress }\n    {if cmdr.gender = \"Hombre\": \n        {OneOf(\"señor\", \"su señoría\")}\n    |elif cmdr.gender = \"Mujer\": \n        {OneOf(\"madám\", \"su señoría\")}\n    |else: \n        Comandante\n    }\n|elif cmdr.empirerating.rank = 12:\n    su gracia\n|elif cmdr.empirerating.rank = 13:\n    su alteza real\n|elif cmdr.empirerating.rank = 14:\n    su majestad\n}\n",
      "default": true,
      "name": "Empire honorific",
      "description": "Función para proporcionar un tratamiento honorífico a su Comandante cuando se alinee con el Imperio"
    },
    "Empire promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{F(\"Empire honorific\")},\nla Armada Imperial le ha \n{OneOf(\"otorgado una promoción\", \"promovido\", \"ascendido\", \"nombrado\")}\npara el rango de\n{when(cmdr.gender = \"Mujer\", event.femininerank, event.rank)}\n{Occasionally(2, \"por sus servicios para el Imperio\")}.",
      "default": true,
      "name": "Empire promotion",
      "description": "Se activa cuando asciende de rango en el Imperio"
    },
    "Engineer contributed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} \r\nthanks you for contributing\r\n{if event.contributiontype = \"Commodity\":\r\n   {event.amount} tonne{if event.amount != 1:s} \r\n|elif event.contributiontype = \"Material\":\r\n   {if material.category = 'Data':\r\n       {event.amount} {OneOf(\"unit\", \"sample\", \"record\")}{if event.amount != 1:s}\r\n   |else:\r\n       {event.amount} {OneOf(\"unit\", \"sample\", \"fragment\")}{if event.amount != 1:s}\r\n   }\r\n}\r\nof {event.contribution}.",
      "default": true,
      "name": "Engineer contributed",
      "description": "Triggered when contributing resources to an engineer in exchange for access"
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.engineer} le ha dado acceso a planos de grado {event.rank}.",
      "default": true,
      "name": "Engineer progressed",
      "description": "Se activa cuando alcanza un nuevo rango con un Ingeniero"
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entrando en combate de corta distancia.",
      "default": true,
      "name": "Entered CQC",
      "description": "Se activa cuando entra en CQC"
    },
    "Entered normal space": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fsd')}\n{SetState('eddi_context_last_action', 'disengage')}\n{SetState('eddi_context_system_name', event.system)}\n{SetState('eddi_context_body_name', event.body)}\n{SetState('eddi_context_body_system', event.system)}\n\n{Pause(5000)}\n\n{OneOf(\"saliendo de supercrucero\", \"{OneOf(\\\"entrando a\\\", \\\"volviendo a\\\", \\\"reduciendo a\\\")} espacio normal\")}\n\n{if event.bodytype = 'Planet':\n    {OneOf(\"cerca de\", \"próximo a\", \"en las cercanías de\")} planet {P(event.body)}\n|elif event.bodytype = 'Star':\n    {OneOf(\"cerca de\", \"próximo a\", \"en las cercanías de\")} star {P(event.body)}\n  |elif event.bodytype = 'Station':\n    {OneOf(\"cerca de\", \"próximo a\", \"en las cercanías de\")} {P(event.body)}\n}. Enfriando {ShipName()}.",
      "default": true,
      "name": "Entered normal space",
      "description": "Se activa cuando su nave vuelve a espacio normal"
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set warninglevel to:\r\n   {set entered to OneOf(\"Hemos entrado en una señal\", \"Entramos en una señal\", \"Entrando en una señal\")}\r\n\r\n   {if event.threat < 2:\r\n      {entered}\r\n   |elif event.threat = 2:\r\n      Precaución. {entered} de amenaza media\r\n   |elif event.threat = 3:\r\n      Alerta. {entered} de alta amenaza\r\n   |elif event.threat = 4:\r\n      Peligro. {entered} de muy alta amenaza\r\n   |elif event.threat = 5:\r\n      Peligro extremo. {Occasionally(2, entered)} de muy alta amenaza\r\n   |elif event.threat = 6:\r\n      Peligro extremo. {Occasionally(2, entered)} de amenaza extremadamente alta\r\n   |elif event.threat = 7:\r\n      Peligro extremo. {Occasionally(2, entered)} de ultra alta amenaza\r\n   |else:\r\n      Peligro extremo. {Occasionally(2, entered)} de nivel {event.threat} de amenaza sin precedentes\r\n   }\r\n}\r\n\r\n{set source to token(event.source, \"$USS_Type_\", 1)}\r\n{if source = \"Aftermath;\":\r\n   {set source to OneOf(\"procedente de las consecuencias de un combate\", \"procedente de los restos de una batalla\")}\r\n|elif ((source = \"Anomaly;\" || source = \"Salvage;\") && event.threat = 2):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"de origen alienínega\", \"de procedencia no humana\", \"de una sonda targoide\")}\r\n|elif (source = \"Anomaly;\" && event.threat = 4):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"de origen alienígena\", \"de procedencia no humana\", \"de un sensor targoide\")}\r\n|elif source = \"Anomaly;\":\r\n   {set source to OneOf(\"de origen anómalo\", \"de procedencia desconocida\", \"de procedencia misteriosa\")}\r\n|elif source = \"Ceremonial;\":\r\n    {set source to \"procedente de comunicaciones ceremoniales\"}\r\n|elif source = \"Convoy;\":\r\n    {set source to \"procedente de un convoy\"}\r\n|elif source = \"DisruptedWakeEchoes;\":\r\n    {set source to \"\"}\r\n|elif source = \"DistressSignal;\":\r\n   {set source to \"procedente de un desastre\"}\r\n|elif source = \"MissionTarget;\":\r\n   {set source to OneOf(\"procedente de una misión\", \"codificada en una misión\")}\r\n|elif source = \"NonHuman;\":\r\n   {set source to OneOf(\"de origen alienígena\",\"de procedencia no humana\")}\r\n|elif source = \"Salvage;\":\r\n    {set source to \"procedente de transmisiones deterioradas\"}\r\n|elif source = \"ValuableSalvage;\":\r\n    {set source to \"procedente de emisiones codificadas\"}\r\n|elif source = \"VeryValuableSalvage;\":\r\n    {set source to \"procedente de emisiones de alto grado\"}\r\n|elif source = \"WeaponsFire;\":\r\n   {set source to OneOf(\"procedente de un combate\", \"originada por disparo de armas\")}\r\n}\r\n\r\n{Pause(2000)}\r\n{warninglevel} {source}. \r\n\r\n{if system.state = \"Anarchy\" && source = \"procedente de transmisiones deterioradas\" && system.population > 0: \r\n   {Occasionally(2, \"\r\n      Precaución.\r\n      {set local to OneOf('locales', 'cercanas')}\r\n      {set chatter to OneOf('comentarios', 'chismorreos', 'rumores')}\r\n      {set indicate to OneOf('indican', 'sugieren', 'implican', 'informan')}\r\n      {OneOf('transmisiones {local} {indicate}', \r\n         '{chatter} en transmisiones {local} {indicate}')}\r\n      {Occasionally(3, 'que hay')}\r\n      {OneOf('elevada', 'alta', 'considerable')}\r\n      {OneOf('actividad de', 'presencia de')}\r\n      {OneOf('{Occasionally(2, \\'sindicatos\\')} criminales ', \r\n             '{Occasionally(2, OneOf(\\'bandas\\', \\'clanes\\'))} piratas ' )}\r\n      en {OneOf('el área', 'los alrededores', 'este sector', 'este sistema')}.\r\n      {OneOf('Permanezca', 'esté', 'manténgase')} {OneOf('vigilante', 'alerta', 'atento')} \r\n      {Occasionally(3,' {F(\\'Honorific\\')}' )}.\r\n   \")}\r\n}",
      "default": true,
      "name": "Entered signal source",
      "description": "Se activa cuando su nave entra en una señal"
    },
    "Entered supercruise": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fsd')}\n{SetState('eddi_context_last_action', 'engage')}\n\n{Pause(1000)}\n\n{OneOf(\"{ShipName()}\", \"\")} {OneOf(\"entrando en\", \"saltando a\")} supercrucero.\n",
      "default": true,
      "name": "Entered supercruise",
      "description": "Se activa cuando su nave entra en supercrucero"
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\n\"Adquiridos datos del sistema {P(event.system)}\",\n \"Datos de{OneOf('l sistema', ' exploración de')}  {P(event.system)} disponibles\",\n\"{Occasionally(3, '{ShipName()} ha')} recibido datos locales de{OneOf('l sistema', 'exploración de')} {P(event.system)}\",\n\"Confirmada la recepción de datos de{OneOf('l sistema', 'exploración de')} {P(event.system)}\"\n)}.",
      "default": true,
      "name": "Exploration data purchased",
      "description": "Se activa cuando compra datos de exploración"
    },
    "Exploration data sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Datos de exploración de {len(event.systems)} sistemas vendidos por {event.reward} créditos\n\n{if len(event.firsts) > 0:\n    , con una bonificación adicional de {event.bonus} créditos por\n    {if len(event.firsts) = 1:\n        un primer descubrimiento\n    |else:\n        {len(event.firsts)} sistemas descubiertos por primera vez\n    }\n}.",
      "default": true,
      "name": "Exploration data sold",
      "description": "Se activa cuando vendes datos de exploración"
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha sido recompensado por sus habilidades de exploración, {F(\"Honorific\")}.",
      "default": true,
      "name": "Exploration promotion",
      "description": "Se activa cuando aumenta su rango de exploración"
    },
    "Federation promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "La armada federal\r\n{OneOf(\"le ha otorgado un ascenso\", \"le ha ascendido\", \"le ha promovido\")}\r\nal rango de\r\n{event.rank}\r\n{Occasionally(2, \"por sus servicios a la federación\")}.",
      "default": true,
      "name": "Federation promotion",
      "description": "Se activa cuando aumenta su rango con la Federación"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"embarcado\", \"acoplado\")} {Occasionally(2, \"en la nave\")}.",
      "default": true,
      "name": "Fighter docked",
      "description": "Se activa cuando atracas el caza en tu nave."
    },
    "Fighter launched": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"lanzando\", \"desacoplando\")} caza {Occasionally(2, \"de la nave\")}.",
      "default": true,
      "name": "Fighter launched",
      "description": "Se activa cuando lanza un caza desde su nave"
    },
    "Fighter rebuilt": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Caza {OneOf(\"Imprimido\", \"Reconstruido\")} y {OneOf(\"listo para despegar\", \"preparado\")}.",
      "default": true,
      "name": "Fighter rebuilt",
      "description": "Se activa cuando se ha reconstruido un caza en el hangar de su nave"
    },
    "File Header": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "File Header",
      "description": "Se activa cuando se ha leído el encabezado del archivo"
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fine')}\n{SetState('eddi_context_last_action', 'incur')}\n{SetState('eddi_context_fine_name', event.victim)}\n{SetState('eddi_context_fine_faction', event.faction)}\n{SetState('eddi_context_fine_amount', event.fine)}\n\n{OneOf ('Se nos ha impuesto una multa de {event.fine} créditos de la facción {event.faction}','la facción {event.faction} nos ha impuesto una multa de {event.fine} créditos')}.",
      "default": true,
      "name": "Fine incurred",
      "description": "Se activa cuando se le impone una multa"
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\nPagada multa de {event.amount} créditos.",
      "default": true,
      "name": "Fine paid",
      "description": "Se activa cuando se paga una multa"
    },
    "Friends status": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\n\n{set uselist to \"black\"}\n\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\n\n{if event.name:\n    {if uselist = \"white\":\n        {if find(whitelist, event.name) > -1:\n            {event.name} is now {event.status}.\n        }\n    |elif uselist = \"black\":\n        {if find(blacklist, event.name) = -1:\n            {event.name} is now {event.status}.\n        }\n    }\n|else:\n    No se de quien me está hablando.\n}",
      "default": true,
      "name": "Friends status",
      "description": "Se activa cuando cambia el estatus de un Comandante amigo"
    },
    "FSD engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'fsd')}\n{SetState('eddi_context_last_action', 'engage')}\n{SetState('eddi_context_system_name', event.system)}\n{SetState('eddi_context_system_system', event.system)}\n{SetState('eddi_context_fsd_target', event.target)}\r\n\n{if event.target = 'Hyperspace':\n    {_ Rewrite context to represent a jump }\n    {SetState('eddi_context_last_subject', 'jump')}\n    {SetState('eddi_context_last_action', 'start')}\n\n    {_ set system to SystemDetails(event.system) _} \r\n    {_ linea comentada porque sino no traducia la variable system.allegiance... ¿¿porque?? _}\n\n    {_ Wait for the FSD countdown and initial jump}\n    {Pause(5000)}\n\n    {OneOf(\"Destino confirmado\",\"salto en progreso\",\"telemetría obtenida\")}.\n    {ShipName()} está {OneOf(\"en dirección a\", \"en ruta a\", \"viajando a\", \"en tránsito a\")} el sistema {P(event.system)}. \r\n{_ Se ha cambiado la variable system.name por event.system _}\r\n\n    {if event.system = homesystem.name:\n        Bienvenido a casa, {F(\"Honorific\")}\n    |else:\n        {set scoopables to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\n        {if slice(event.stellarclass, 0, 1) = \"D\":\n            Precaución: detectada enana blanca.\n        |elif event.stellarclass = \"N\":\n            Precaución: detectada estrella de neutrones.\n        |elif event.stellarclass = \"H\":\n            Precaución: detectado agujero negro.\n        |elif find(scoopables, event.stellarclass) = -1:\n            {OneOf(\"Atención:\",\"Tenga en cuenta que\",\"Cuidado Comandante,\")} la estrella de destino no permite el repostaje de combustible.\n        }\n        \n        {if lastsystem.allegiance && lastsystem.allegiance != \"Ninguno\" && lastsystem.allegiance != \"Independiente\" && (!system.allegiance || system.allegiance = \"Ninguno\" || system.allegiance = \"Independente\"):\n            Comandante {OneOf(\"estamos abandonando el espacio de\", \"hemos dejado\", \"ya no estamos en territorio de\")} {lastsystem.allegiance}.\n        |elif lastsystem.allegiance && lastsystem.allegiance != system.allegiance && system.allegiance && system.allegiance != \"Ninguno\":\n            {OneOf(\"ahora estamos en espacio de\", \"hemos llegado a\", \"estamos entrando en espacio de\")} {system.allegiance}.\n            {if cmdr.title != \"Comandante\":\n                El Gobierno local le da la bienvenida {Oneof(\"como\",\"con el título de\")} {F(\"Honorific\")}.\n            }\n        }\n\n        {if system.visits = 0:\n            Es su primera visita a este sistema\n        |elif system.visits = 1:\n            Es su segunda visita a este sistema\n        |elif system.visits = 2:\n            Es su tercera visita a este sistema\n        |elif system.visits = 3:\n            Es su cuarta visita a este sistema\n        |else:\n            Ha visitado este sistema {system.visits} veces\n        }.\n\n        {if !system.population:\n            {OneOf(\"Este sistema está despoblado\",\"No hay presencia humana en este sistema\", \"La Humanidad aún no ha colonizado este sistema\")}.\n        |else:\n            {F(\"System report\")}\n        }\n\n        {if system.distancefromhome:\n            {Occasionally(7, \"{OneOf(\\\"Se encuentra a\\\", \\\"Su actual posición es a\\\", \\\"Actualmente esta a\\\")} {Humanise(system.distancefromhome)} años luz de {OneOf(\\\"casa\\\", \\\"{P(homesystem.name)}\\\")}.\")}\n        }\n\n        {if system.comment:\n            Ha hecho {OneOf(\"una anotación\", \"un comentario\", \"una observación\")} {OneOf(\"sobre\", \"acerca de\", \"en relación a\")} este sistema que {OneOf(\"dice\", \"indica\", \"señala\")} {system.comment}.\n        }\n    }\n}",
      "default": false,
      "name": "FSD engaged",
      "description": "Se activa cuando se ha conectado su motor de distorsión (FSD)"
    },
    "Fuel check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fuel Check _}\n{_ Report fuel level _}\n\n{if ship.name = state.eddi_fuelcheck_shipname:\n    {if state.eddi_context_fuel_used > state.eddi_fuelcheck_maxfuel:\n        {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\n    }\n|else:\n    {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\n    {SetState('eddi_fuelcheck_shipname', ship.name)}\n}\n\n{set maxfuel to state.eddi_fuelcheck_maxfuel}\n{set fuelremaining to state.eddi_context_fuel_remaining}\n{set maxjump to fuelremaining/maxfuel}\n{set currentfuel to round(fuelremaining / ship.fueltanktotalcapacity * 100, 0)}\n{set shipsfuel to:\n   {OneOf(\" niveles\", \" depósito\", \" reservas\")} de combustible {Occasionally(2, \"de {P(ShipName())}\" )}\n}\n{set currentpercent to: \n   al {currentfuel} por ciento {Occasionally(2, \"de su capacidad\")}\n}\n{set title to Occasionally(3,\"{F('Honorific')}\")}\n{if maxjump < 0.5:\n   Peligro!\n   {shipsfuel} agotado!\n   {Pause(500)}\n   Se encuentra en la reserva. Desconecte todos los sistemas no esenciales!\n   {Pause(500)}\n   Transpondedor de emergencia listo-{title}\n|elif maxjump < 1.25:\n   {OneOf(\"Alerta\", \"Precaución\", \"Peligro\", \"Atención\")}-{title}:\n   {shipsfuel} {OneOf(\"peligrosamente bajo\", \"casi agotado\")}.\n   {OneOf(\"Por favor recargue combustible\", \"Se recomienda encarecidamente que recargue combustible\")}\n|elif currentfuel < 25:\n   {OneOf(\"Alerta\", \"Precaución\", \"Peligro\", \"Atención\")}-{title}:\n   {shipsfuel} {OneOf(\"por debajo del 25%\", \"{currentpercent}\" )}\n|elif currentfuel < 50:\n   {shipsfuel} {OneOf(\"por debajo del 50%\", \"{currentpercent}\" )}-{title}\n|elif currentfuel < 75:\n   {Occasionally(2, \"{shipsfuel} {currentpercent}-{title}\")}\n|elif currentfuel < 100:\n   {Occasionally(3, \"{shipsfuel} {currentpercent}-{title}\")}\n|else:\n   {shipsfuel} {OneOf(currentpercent, \"al máximo\")}-{title}\n}",
      "default": true,
      "name": "Fuel check",
      "description": "Informa sobre niveles de combustible"
    },
    "Galnet latest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet latest news",
      "description": "Lee las últimas noticias que no se hayan leído en una determinada categoría"
    },
    "Galnet mark read": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\n{set articlecategory to state.article_category}\n\n{if articlecategory:\n    {set articles to GalnetNewsArticles(articlecategory)}\n|else:\n    {set articles to GalnetNewsArticles('Article')}\n}\n\n{if len(articles) = 0:\n    No hay noticias sin leer\n    {if articlecategory: 'in that category' }\n|elif len(articles) = 1:\n    {set item to 0}\n    {while item < len(articles):\n        {GalnetNewsMarkRead(articles[item].id)}\n        {set item to (item + 1)}\n    }\n{OneOf('un artículo marcado como leído', 'una noticia marcada como leída')} \n\n|else:\n    {set item to 0}\n    {while item < len(articles):\n        {GalnetNewsMarkRead(articles[item].id)}\n        {set item to (item + 1)}\n    }\n{len(articles)} {OneOf('artículos marcados como leídos', 'noticias marcadas como leídas')} \n}. \n",
      "default": true,
      "name": "Galnet mark read",
      "description": "Marca artículos nuevos como leídos"
    },
    "Galnet news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch article from state }\n{set articleid to state.articleid}\n{if articleid:\n    {set article to GalnetNews(articleid)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'news')}\n    {SetState('eddi_context_galnet_news_id', articleid)}\n}\n\n{if !article:\n    {_ Fetch from context }\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\n}\n\n{if article:\n    {article.title}: {article.content}\n    {GalnetNewsMarkRead(article.id)}\n|else:\n    No tengo ninguna información sobre ese artículo\n}.",
      "default": true,
      "name": "Galnet news",
      "description": "Lee un artículo en particular"
    },
    "Galnet news published": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set statustitle to \"^(Galactic News: ((Weekly .*)|(Starport Status Update)))|(Powerplay: Incoming Update)\"}\n\n{set interesting_news_title to []}\n{set interesting_news_content to []}\n{set not_interesting_news_title to []}\n{set not_interesting_news_content to []}\n\n{set item to 0}\n{while item < len(event.items):\n    {if !match(event.items[item].title, statustitle):\n        {set interesting_news_title to cat(interesting_news_title, [event.items[item].title])}\n        {set interesting_news_content to cat(interesting_news_content, [event.items[item].content])}\n    |else:\n        {set not_interesting_news_title to cat(not_interesting_news_title, [event.items[item].title])}\n        {set not_interesting_news_content to cat(not_interesting_news_content, [event.items[item].content])}\n    }\n    {GalnetNewsMarkRead(event.items[item].content.id)}\n    {set item to (item + 1)}\n}\n{if len(event.items) = len(interesting_news_title): \n    {set allinteresting to 1} \n}\n\n{if len(interesting_news_title) > 0:\n    {if len(interesting_news_title) = 1:\n        {set remarkable to OneOf('y destacado', 'e importante', 'e interesante', 'e intrigante', 'e inusual')}\n        Se ha publicado un nuevo {OneOf('', '{remarkable}' )}\n        artículo de GalNet titulado {interesting_news_title[0]}.\n    |elif len(event.items) > 1:\n        {len(event.items)} \n        {if allinteresting: \n         Se han publicado nuevos {OneOf('y destacados', 'e importantes', 'e interesantes', 'e intrigantes', 'e inusuales')}\n        }\n        artículos de GalNet \n        {if !allinteresting:\n             , incluyendo {len(interesting_news_title)} \n             {OneOf('de interés.', 'especialmente interesante.', 'digno de comentario.')}\n        }.\n    }\n|elif len(event.items) != ( len(interesting_news_title) + len(not_interesting_news_title) ):\n    {len(event.items)} se han publicado nuevos artículos de GalNet, pero no he sido capaz de determinar si alguno es de su interés, {F('Honorific')}. \n|elif len(interesting_news_title) = 0:\n    Se han actualizado las noticias de GalNet, pero no hay nada digno de mencionar, {F('Honorific')}.\n}\n\n{if len(interesting_news_title) > 0:\n    {if len(interesting_news_title) = 1:\n        Dice: {interesting_news_content[0]}.\n    |elif len(interesting_news_title) > 1:\n        {set item to 0}\n        {while item < len(interesting_news_title):\n            {if item = 0:\n                El primero \n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            |elif item = 1:\n                El segundo\n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            |elif item = len(event.items) - 1:\n                El último\n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            |else:\n                El siguiente\n                se titula {interesting_news_title[item]},\n                y dice: {interesting_news_content[item]}.\n            }\n            {set item to item + 1}\n            {Pause(1000)}\n        }\n    }\n}",
      "default": true,
      "name": "Galnet news published",
      "description": "Se activa cuando se publican nuevas noticias en GalNet"
    },
    "Galnet oldest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    No hay noticias sin leer en esa categoría\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet oldest news",
      "description": "Lee las noticias más antiguas sin leer en una categoría determinada"
    },
    "Galnet unread report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    No tiene noticias sin leer\r\n|elif len(articles) = 1:\r\n    Tiene una noticia sin leer\r\n|else:\r\n    Tiene {len(articles)} noticias sin leer\r\n}.",
      "default": true,
      "name": "Galnet unread report",
      "description": "Informa sobre noticias sin leer"
    },
    "Heat damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Alarma:\")}\r\ndaño por calentamiento.",
      "default": true,
      "name": "Heat damage",
      "description": "Se activa cuando su nave está sufriendo daños por excesivo calor"
    },
    "Heat warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Cuidado:\")}\r\nNiveles de calentamiento subiendo por encima del límite tolerable.",
      "default": true,
      "name": "Heat warning",
      "description": "Se activa cuando el calor de su nave supera el 100%"
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.allegiance = \"Empire\":\n    {F(\"Empire honorific\")}\n|elif system.allegiance = \"Federation\":\n    {if cmdr.federationrating.rank = 0:\n        Comandante\n    |else:\n        {cmdr.federationrating.name}\n    }\n|else:\n    Comandante\n}\n",
      "default": true,
      "name": "Honorific",
      "description": "Función para proporcionar un tratamiento honorífico a su Comandante"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\n    {if event.health < 40:\n        Alerta roja:\n    |elif event.health < 60:\n        Atención:\n    |elif event.health < 80:\n        Precaución:\n    }\n    {OneOf(\"Casco\", \"Integridad del casco\", \"Integridad\", \"Integridad estructural\")} al {event.health}%.\n}\n",
      "default": true,
      "name": "Hull damaged",
      "description": "Se activa cuando el casco de su nave se encuentra dañada en cierta medida"
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set insurance to round(ship.value * cmdr.insurance / 100)}\n\n{set covereds to round((cmdr.credits / insurance) - 0.5)}\n\n{if covereds = 0:\n Peligro: No tiene suficientes créditos para cubrir la franquicia de su seguro. \n|elif covereds = 1:\n  Precaución: Solo tiene créditos suficientes para cubrir una sola franquicia del seguro.\n|elif covereds < 4:\n  Observación: Solo tiene créditos suficientes para cubrir {covereds} franquicias del seguro.\n}\n",
      "default": true,
      "name": "Insurance check",
      "description": "Comprueba que tenga créditos suficientes para el seguro de su nave"
    },
    "Jet cone boost": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\nMotor de distorsión cargado al {Humanise(event.boost * 100)} %.",
      "default": true,
      "name": "Jet cone boost",
      "description": "Se activa cuando se ha recogido suficiente material de un chorro de eyección (en una enana blanca o una estrella de neutrones) para un salto de rango ampliado"
    },
    "Jet cone damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Jet cone damage",
      "description": "Se activa en espacio normal cuando se pasa a través de un chorro de eyección de una enana blanca o una estrella de neutrones ocasionando daños a los módulos de la nave"
    },
    "Jumped": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'jump')}\n{SetState('eddi_context_last_action', 'complete')}\n{SetState('eddi_context_system_name', system.name)}\n{SetState('eddi_context_system_system', system.name)}\n{SetState('eddi_context_fuel_remaining', event.fuelremaining)}\n{SetState('eddi_context_fuel_used', event.fuelused)}\n\n{F('Fuel check')}\n{Pause(2000)}\n\n{set statereport to F(\"System state report\")}\n{if statereport:\n    {Pause(2000)}\n    Información:  {statereport}\n}",
      "default": true,
      "name": "Jumped",
      "description": "Se activa cuando se completa un salto a otro sistema estelar"
    },
    "Killed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Killed",
      "description": "Se activa cuando se destruye a otro jugador"
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": " {set landingpad to state.eddi_context_landing_pad_pad}\n    La pista de aterrizaje número {landingpad}, está a\n    {if landingpad = 1:\n        las seis en punto cerca de la entrada\n    |elif landingpad = 2:\n        las seis en punto cerca de la entrada\n    |elif landingpad = 3:\n        las seis en punto al fondo\n    |elif landingpad = 4:\n        las seis en punto al fondo\n    |elif landingpad = 5:\n        las siete en punto cerca de la entrada\n    |elif landingpad = 6:\n        las siete en punto cerca de la entrada\n    |elif landingpad = 7:\n        las siete en punto al fondo\n    |elif landingpad = 8:\n        las siete en punto al fondo\n    |elif landingpad = 9:\n        las ocho en punto cerca de la entrada\n    |elif landingpad = 10:\n        las ocho en punto al fondo\n    |elif landingpad = 11:\n        las nueve en punto cerca de la entrada\n    |elif landingpad = 12:\n        las nueve en punto cerca de la entrada\n    |elif landingpad = 13:\n        las nueve en punto en la zona central\n    |elif landingpad = 14:\n        las nueve en punto al fondo\n    |elif landingpad = 15:\n        las nueve en punto al fondo\n    |elif landingpad = 16:\n        las diez en punto cerca de la entrada\n    |elif landingpad = 17:\n        las diez en punto cerca de la entrada\n    |elif landingpad = 18:\n        las diez en punto al fondo\n    |elif landingpad = 19:\n        las diez en punto al fondo\n    |elif landingpad = 20:\n        las once en punto cerca de la entrada\n    |elif landingpad = 21:\n        las once en punto cerca de la entrada\n    |elif landingpad = 22:\n        las once en punto al fondo\n    |elif landingpad = 23:\n        las once en punto al fondo\n    |elif landingpad = 24:\n        las doce en punto cerca de la entrada\n    |elif landingpad = 25:\n        las doce en punto al fondo\n    |elif landingpad = 26:\n        la una en punto cerca de la entrada\n    |elif landingpad = 27:\n        la una en punto cerca de la entrada\n    |elif landingpad = 28:\n        la una en punto en la zona central\n    |elif landingpad = 29:\n        la una en punto al fondo\n    |elif landingpad = 30:\n        la una en punto al fondo\n    |elif landingpad = 31:\n        las dos en punto cerca de la entrada\n    |elif landingpad = 32:\n        las dos en punto cerca de la entrada\n    |elif landingpad = 33:\n        las dos en punto al fondo\n    |elif landingpad = 34:\n        las dos en punto al fondo\n    |elif landingpad = 35:\n        las tres en punto cerca de la entrada\n    |elif landingpad = 36:\n        las tres en punto cerca de la entrada\n    |elif landingpad = 37:\n        las tres en punto en la zona central\n    |elif landingpad = 38:\n        las tres en punto al fondo\n    |elif landingpad = 39:\n        las cuatro en punto cerca de la entrada\n    |elif landingpad = 40:\n        las cuatro en punto al fondo\n    |elif landingpad = 41:\n        las cinco en punto cerca de la entrada\n    |elif landingpad = 42:\n        las cinco en punto cerca de la entrada\n    |elif landingpad = 43:\n        las cinco en punto en la zona central\n    |elif landingpad = 44:\n        las cinco en punto al fondo\n    |elif landingpad = 45:\n        las cinco en punto al fondo\n    }\n    , entrando con las luces verdes a su derecha.",
      "default": true,
      "name": "Landing pad report",
      "description": "Informa sobre la ubicación de la pista de aterrizaje asignada"
    },
    "Liftoff": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{if event.playercontrolled = true:\n  Despegando.\n|else:\n  {ShipName()} ha despegado.\n}",
      "default": true,
      "name": "Liftoff",
      "description": "Se activa cuando su nave despega desde la superficie de un planeta"
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set  controllers to 0}\n{for compartment in ship.compartments:\n    {if find(compartment.module.name, \"Controller\") != -1:\n        {set controllers to controllers + 1}\n    }\n}\n\n{set limpets to 0}\n{for cargo in ship.cargo:\n    {if cargo.commodity.name = \"Limpet\":\n        {set limpets to limpets + cargo.amount}\n    }\n}\n{set tenpercent to ship.cargocapacity / 10 - 1}\n{if controllers > 0 && limpets = 0:\n    Aviso: llevamos un lanzador de drónes pero no llevamos ningún drón.\n|elif controllers = 0 && limpets > 0:\n    transportamos drónes pero no llevamos ningún lanzador\n|elif controllers > 0 && limpets < tenpercent:\n    solo llevamos {limpets} drónes a bordo; debería considerar el adquirir más.\n}\n",
      "default": true,
      "name": "Limpet check",
      "description": "Comprueba la presencia o ausencia de drones y controladores de drones"
    },
    "Limpet launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Drón {OneOf('lanzado','en marcha')}.",
      "default": true,
      "name": "Limpet launched",
      "description": "Triggered when a limpet is launched"
    },
    "Limpet purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} drón{if event.amount > 1:es} {Occasionally(2, \"ha{if event.amount > 1:n} sido\")} añadido{if event.amount > 1:s}, a{OneOf(\"l compartimento de carga\",\"l inventario\",\"la bodega\")} {OneOf(\"\",\"de la {ShipName()}\")}",
      "default": true,
      "name": "Limpet purchased",
      "description": "Se activa cuando compra drones en una estación espacial"
    },
    "Limpet sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} drón{if event.amount > 1:es}{Occasionally(2, \"ha{if event.amount > 1:n} sido\")} vendidos.",
      "default": true,
      "name": "Limpet sold",
      "description": "Se activa cuando vende drones en una estación espacial"
    },
    "List launchbays": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for launchbay in ship.launchbays:\n    Tienes un hangar de tamaño {launchbay.size}, de tipo {launchbay.type}.\n    {for vehicle in launchbay.vehicles:\n        Tiene un {P(vehicle.name)} con {vehicle.loadout} de carga\n\n        {if type(vehicle.mount) != null:\n            {if vehicle.mount = 'F':\n                , y armas fijas\n            |elif vehicle.mount = 'G':\n                , y armas de seguimiento\n            }\n        }\n        .{_ full stop}\n\n        {if vehicle.rebuilds != null:\n            {if vehicle.rebuilds = 1:\n                Solo puedes imprimir uno más.\n            |elif vehicle.rebuilds = 0:\n                Falta material para su impresión.\n            |else:\n                Quedan {vehicle.rebuilds} cargas de impresión restantes.\n            }\n        }\n\n        {Pause(500)}\n    }\n}\n",
      "default": true,
      "name": "List launchbays",
      "description": "Describe el contenido de las bahías con vehículos de la nave."
    },
    "Location": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_system_name', event.system)}\n{SetState('eddi_context_body_name', event.body)}\n{SetState('eddi_context_body_system', event.system)}\n\nNos encontramos \n{if event.docked:\n    acoplados en la\n    {if event.station = event.body:\n        estación orbital {event.station}\n    |else:\n        estación planetaria {event.station} en {event.body}\n    }\n|elif event.body:\n    cerca de {event.body},\n} en el sistema {event.system}.\n",
      "default": true,
      "name": "Location",
      "description": "Se activa cuando se informa sobre la ubicación del Comandante, normalmente cuando se reinicia el juego"
    },
    "Low fuel": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Low fuel",
      "description": "Se activa cuando los niveles de combustible bajan del 25%"
    },
    "Market information updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Find out in advance what we have to say }\n{if ship.role = \"Multi-purpose\" || ship.role = \"Trading\":\n    {set purchasecheck to F(\"Commodity purchase check\")}\n}\n{set limpetcheck to F(\"Limpet check\")}\n{set swapoutcheck to F(\"Swapout check\")}\n{set salecheck to F(\"Commodity sale check\")}\n\n{Pause(4500)}\n\n{if purchasecheck || salecheck || limpetcheck || swapoutcheck:\n    {OneOf(\"Recibid\", \"Obtenid\")}{OneOf(\"as actualizaciones de \", \"o Refresco de \", \"os cambios en \")}{OneOf(\"datos de\", \"información de\", \"precios en\")}\n    {OneOf(\" Mercado local\",\" Servicios de estación\")}.\n\n    {salecheck}\n    {purchasecheck}\n    {swapoutcheck}\n    {limpetcheck}\n}",
      "default": true,
      "name": "Market information updated",
      "description": "Se activa cuando se ha actualizado la información del mercado de la estación espacial en la que se ha aterrizado"
    },
    "Material collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material collected",
      "description": "Se activa cuando se recoge un material"
    },
    "Material discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\n{set _inventory(required) to:\n    {for material in materials:\n        {if material.material = required:\n            {return material}\n        }\n    }\n}\n\n{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{set inventory to _inventory(material.name)}\n\n\n{if inventory:\n    {if inventory.maximum && inventory.maximum < inventory.amount:\n        {set over to inventory.amount - inventory.maximum}\n        {if over > 1:\n            Puede deshacerse de {over} unidades de {inventory.material} para alcanzar su nivel máximo.\n        |elif over = 1:\n            Puede deshacerse solo de una tonelada de {inventory.material} para alcanzar su nivel máximo.\n        }\n    |elif inventory.desired && inventory.desired < inventory.amount:\n        {set over to inventory.amount - inventory.desired}\n        {if over > 1:\n            Puede deshacerse de {over} unidades de {inventory.material} su nivel deseado\n        |elif over = 1:\n             Puede deshacerse solo de una tonelada de {inventory.material} su nivel deseado\n        }\n    |elif inventory.desired:\n        Está por debajo del nivel deseado de {inventory.material}.\n    |elif inventory.maximum:\n        Está por debajo de su nivel máximo de {inventory.material}.\n    |else:\n        No ha establecido ningún nivel para {inventory.material}.\n    }\n}\n",
      "default": true,
      "name": "Material discard report",
      "description": "Informa de cuántos materiales puedes eliminar"
    },
    "Material discarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discard')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material discarded",
      "description": "Se activa cuando eliminas algún material"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material discovered",
      "description": "Se activa cuando descubres un material"
    },
    "Material donated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material donated",
      "description": "Se activa cuando donas un material"
    },
    "Material inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material inventory",
      "description": "Se activa cuando obtienes un inventario de todos tus materiales"
    },
    "Material inventory report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\n{set _inventory(required) to:\n    {for material in materials:\n        {if material.material = required:\n            {return material}\n        }\n    }\n}\n\n{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n \n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_last_subject', 'inventory')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{set inventory to _inventory(material.name)}\n\n{if inventory && inventory.amount > 0:\n    {if inventory.amount = 1:\n       Tenemos {inventory.amount} unidad de {inventory.material} a bordo.\n    |else:\n       Tenemos {inventory.amount} unidades de {inventory.material} a bordo.\n    }\n|else:\n    No hay {inventory.material} a bordo.\n}\n",
      "default": true,
      "name": "Material inventory report",
      "description": "Informa de cuántos materiales llevas a bordo"
    },
    "Material location report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{if material.name:\n    {if material.location:\n        Puedes obtener {material.name} de {material.location}\n    |else:\n        No encuentro información sobre dónde encontrar {material.name}\n    }\n|else:\n    No reconozco ese material\n}.\n",
      "default": true,
      "name": "Material location report",
      "description": "Informa sobre dónde encontrar un material en particular"
    },
    "Material required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\n{set _inventory(required) to:\n    {for material in materials:\n        {if material.material = required:\n            {return material}\n        }\n    }\n}\n\n{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{set inventory to _inventory(material.name)}\n\n\n{if inventory:\n    {if inventory.minimum && inventory.minimum > inventory.amount:\n        {set under to inventory.minimum - inventory.amount}\n        {if under > 1:\n            Necesita {under} unidades de {inventory.material} para alcanzar la cantidad mínima.\n        |elif under = 1:\n            Necesita una unidad de {inventory.material} para alcanzar la cantidad mínima.\n        }\n    |elif inventory.desired && inventory.desired > inventory.amount:\n        {set under to inventory.desired - inventory.amount}\n        {if under > 1:\n            Necesita {under} unidades de {inventory.material} para alcanzar el nivel deseado.\n        |elif under = 1:\n            Necesita una unidad más de {inventory.material} para alcanzar el nivel deseado.\n        }\n    |elif inventory.desired:\n        Llevamos mas {inventory.material} de lo deseado.\n    |elif inventory.minimum :\n        Estamos por encima del nivel mínimo de {inventory.material}.\n    |else:\n        No se ha establecido la cantidad deseada de {inventory.material}.\n    }\n}\n\n",
      "default": true,
      "name": "Material required report",
      "description": "Informa de cuántos materiales se necesitan para alcanzar el nivel \"deseado\""
    },
    "Material threshold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.level = 'Minimum': \n{_ Gone below the minimum level } \n{OneOf(\"El Stock\", \"el inventario\", \"la reserva\")} de {event.material.name} ha caído por debajo del mínimo establecido\n|elif event.level = 'Maximum': \n{_ Gone above the maximum level } \n{OneOf(\"El Stock\", \"el inventario\", \"la reserva\")} de {event.material.name} ha superado el máximo establecido\n|else: \n{_ Moved around the desired level } \n{if event.change = 'Increase': \nHas alcanzado el nivel deseado de {event.material.name}. \n|else: \nEst{event.material.name}. \n} \n} \n\n{OneOf(\"Actualmente tenemos {event.amount}\", \n\"Ahora mismo tenemos {event.amount}\", \n\"{event.amount} a bordo\")}.",
      "default": true,
      "name": "Material threshold",
      "description": "Se activa cuando un material alcanza el umbral"
    },
    "Material traded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material traded",
      "description": "Se activa cuando se comercializa con un comerciante de materiales"
    },
    "Material use report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\n{set material to state.material}\n{if material:\n    {_ Fetch full material details }\n    {set material to MaterialDetails(material)}\n\n    {_ Context }\n    {SetState('eddi_context_last_subject', 'material')}\n    {SetState('eddi_context_material_name', material.name)}\n}\n\n{if !material:\n    {_ Fetch from context }\n    {set material to MaterialDetails(state.eddi_context_material_name)}\n}\n\n{if material && material.name:\n    {set uses to len(material.blueprints)}\n    {if slice(material.name, len(material.name)-1) = 's':\n        {set plural to 'son'}\n    |else:\n        {set plural to 'es'}\n    }\n    {if uses = 0:\n      Ninguna cantidad de {material.name} {plural} de utilidad para ningún plano\n    |elif uses = 1:\n        {set name to cat(material.blueprints[0].name, material.blueprints[0].modulename, 'grade', material.blueprints[0].grade)}\n        {material.name} {plural} de utilidad para el plano {name}\n    |elif uses = 2:\n        {set name0 to cat(material.blueprints[0].name, material.blueprints[0].modulename, 'grade', material.blueprints[0].grade)}\n        {set name1 to cat(material.blueprints[1].name, material.blueprints[1].modulename, 'grade', material.blueprints[1].grade)}\n        {material.name} {plural} de utilidad para los planos {name0} y {name1}\n    |else:\n        {material.name} {plural} de utilidad para los {len(material.blueprints)} planos siguientes:\n        {set cur to 0}\n        {while cur < len(material.blueprints):\n            {set name to cat(material.blueprints[cur].name, material.blueprints[cur].modulename, 'grade', material.blueprints[cur].grade)}\n            {if cur = 0:\n                {name}\n            |elif cur < len(material.blueprints) - 1:\n                , {name}\n            |else:\n                , y {name}\n            }\n            {set cur to cur + 1}\n        }\n    }\n|else:\n    No consigo encontrar información sobre este material\n}.\n",
      "default": true,
      "name": "Material use report",
      "description": "Informa del uso de un material"
    },
    "Materials discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\n{_ Find those that are above maximum, desired and minimum}\n{set shoulddiscardmaterials to []}\n{set coulddiscardmaterials to []}\n{set lastdiscardmaterials to []}\n\n{for material in materials:\n    {if material.maximum && material.amount > material.maximum:\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\n    |elif material.desired && material.amount > material.desired:\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\n    |elif material.minimum && material.amount > material.minimum:\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\n    }\n}\n\n{if len(shoulddiscardmaterials) > 0:\n   Estamos por encima del nivel máximo de {if len(shoulddiscardmaterials) = 1: 1 material |else: {len(shoulddiscardmaterials)} materials}.  Podemos deshacernos de\n    {if len(shoulddiscardmaterials) = 1:\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].material}\n    |elif len(shoulddiscardmaterials) = 2:\n        {shoulddiscardmaterials[0].amount - shoulddiscardmaterials[0].maximum} {shoulddiscardmaterials[0].material} y {shoulddiscardmaterials[1].amount - shoulddiscardmaterials[1].maximum} {shoulddiscardmaterials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(shoulddiscardmaterials):\n            {if cur = 0:\n                {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\n            |elif cur < len(shoulddiscardmaterials) - 1:\n                , {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\n            |else:\n                , y {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|elif len(coulddiscardmaterials) > 0:\n    Tenemos más cantidad de {if len(coulddiscardmaterials) = 1: 1 material |else: {len(coulddiscardmaterials)} materials} de lo deseado.  Podemos descartar\n    {if len(coulddiscardmaterials) = 1:\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].material}\n    |elif len(coulddiscardmaterials) = 2:\n        {coulddiscardmaterials[0].amount - coulddiscardmaterials[0].desired} {coulddiscardmaterials[0].material} y {coulddiscardmaterials[1].amount - coulddiscardmaterials[1].desired} {coulddiscardmaterials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(coulddiscardmaterials):\n            {if cur = 0:\n                {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\n            |elif cur < len(coulddiscardmaterials) - 1:\n                , {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\n            |else:\n                , y {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|elif len(lastdiscardmaterials) > 0:\n    Estamos por encima del mínimo requerido de {if len(lastdiscardmaterials) = 1: 1 material |else: {len(lastdiscardmaterials)} materials}.  Podemos eliminar \n    {if len(lastdiscardmaterials) = 1:\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material}\n    |elif len(lastdiscardmaterials) = 2:\n        {lastdiscardmaterials[0].amount - lastdiscardmaterials[0].minimum} {lastdiscardmaterials[0].material} y {lastdiscardmaterials[1].amount - lastdiscardmaterials[1].minimum} {lastdiscardmaterials[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(lastdiscardmaterials):\n            {if cur = 0:\n                {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\n            |elif cur < len(lastdiscardmaterials) - 1:\n                , {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\n            |else:\n                , y {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|else:\n    No podemos deshacernos de ningún material si queremos estar dentro de los mínimos necesarios\n}\n",
      "default": true,
      "name": "Materials discard report",
      "description": "Informa sobre qué materiales se pueden descartar"
    },
    "Materials required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\n\n{for material in materials:\n  {if material.desired && material.amount < material.desired:\n    {set required to cat(required, [material])}\n }\n}\n\n{if len(required) > 0:\n    Se requiere\n    {if len(required) = 1:\n        {required[0].desired - required[0].amount} {required[0].material}\n    |elif len(required) = 2:\n        {required[0].desired - required[0].amount} {required[0].material} and {required[1].desired - required[1].amount} {required[1].material}\n    |else:\n        {set cur to 0}\n        {while cur < len(required):\n            {if cur = 0:\n                {required[cur].desired - required[cur].amount} {required[cur].material}\n            |elif cur < len(required) - 1:\n                , {required[cur].desired - required[cur].amount} {required[cur].material}\n            |else:\n                , y {required[cur].desired - required[cur].amount} {required[cur].material}\n            }\n            {set cur to cur + 1}\n        }\n    }.\n|else:\n    Ya tenemos todos los materiales deseados\n}",
      "default": true,
      "name": "Materials required report",
      "description": "Informa de cuántos materiales son necesarios para alcanzar el nivel \"deseado\""
    },
    "Message received": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'message')}\n{SetState('eddi_context_last_action', 'receive')}\n{SetState('eddi_context_message_name', event.from)}\n{SetState('eddi_context_message_content', event.message)}\n\n{if event.player = true:\n    {if event.message = \"o7\":\n        El comandante {event.from}\n        {if event.channel = \"player\":\n            le\n        } manda saludos.\n    |else:\n        {event.from} dice: {event.message}.\n    }\n|elif event.source != \"Station\":\n    Mensaje de {event.from}: {event.message}.\n}\n",
      "default": true,
      "name": "Message received",
      "description": "Se activa cuando recibes un mensaje"
    },
    "Message sent": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'message')}\n{SetState('eddi_context_last_action', 'send')}\n{SetState('eddi_context_message_name', event.to)}\n{SetState('eddi_context_message_content', event.message)}\n\n{OneOf(\"Lanzando mensaje\", \"Mensaje enviado\", \"Enviado\")}.",
      "default": true,
      "name": "Message sent",
      "description": "Se activa cuando envías un mensaje"
    },
    "Mission abandoned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Misión abandonada.",
      "default": true,
      "name": "Mission abandoned",
      "description": "Se activa cuando abandonas una misión"
    },
    "Mission accepted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.communal:\n    Aceptado objetivo de la comunidad.\n|else:\n    Misión para la facción {event.faction} aceptada.\n    {if event.passengerswanted:\n        {set wanteddescription to OneOf(\"pasajeros buscados\", \"conocidos criminales\", \"criminales buscados\")}\n        Precaución: {OneOf(\"Estamos transportando {wanteddescription}\",\"{wanteddescription} a bordo.\")}.\n    }\n}",
      "default": true,
      "name": "Mission accepted",
      "description": "Se activa cuando aceptas una misión"
    },
    "Mission completed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.reward > 0:\n    Pago de {Humanise(event.reward)} créditos {OneOf('recibido', 'confirmado')} {Occasionally(2, 'por {P(event.faction)}')}.\n|elif event.donation > 0:\n    {OneOf(\n\"Donación {Occasionally(2, 'de {Humanise(event.donation)} créditos')} para {Occasionally(2, 'los agradecidos')} {P(event.faction)}\",\n\"{P(event.faction)} han recibido {Occasionally(2, 'gratamente')} la donación {Occasionally(2, 'de {Humanise(event.donation)} créditos')}\",\n\"La facción {P(event.faction)} agradece la donación {Occasionally(2, 'de {Humanise(event.donation)} créditos')} recibida\"\n)}.\n|else:\n    Misión completada.\n}\n{for commodityreward in event.commodityrewards:\n  Se han {OneOf(\"transferido\",\"añadido\")}{commodityreward.amount} toneladas de {commodityreward.commodity} {OneOf(\"a bordo\",\"al inventario\",\"a la bodega\",\"\")}\n}",
      "default": true,
      "name": "Mission completed",
      "description": "Se activa cuando completas una misión"
    },
    "Mission failed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Mission failed",
      "description": "Se activa cuando fallas una misión"
    },
    "Mission redirected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Misión redirigida desde\n{if event.olddestinationstation:\n   {event.olddestinationstation} en el sistema {event.olddestinationsystem}, \n   hacia la estación {event.newdestinationstation} en el sistema {event.newdestinationsystem}\n|else:\n   el sistema {event.olddestinationsystem} hacia {event.newdestinationsystem}\n}",
      "default": true,
      "name": "Mission redirected",
      "description": "Se activa cuando una misión es redirigida"
    },
    "Modification crafted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Modification crafted",
      "description": "Se activa cuando creas una modificación a un módulo"
    },
    "Module arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\nSu {event.module.name} ha\n\n{OneOf('llegado{if station.name != event.station && event.station: a}', \n       'completado su transferencia {if station.name != event.station && event.station: en}')}\n\n{if station.name != event.station && event.station:\n   {event.station}\n   {if system.name != event.system && event.system:\n      en el sistema {event.system}\n   }\n}.",
      "default": true,
      "name": "Module arrived",
      "description": "Se aplica cuando se completa una transferencia de módulo"
    },
    "Module purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Adquirido un {event.buymodule.name} de clase {event.buymodule.class}-{event.buymodule.grade}\n\n{if type(event.buymodule.mount) != \"vacío\":\n    {for index, value in event.buymodule.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    } \n} \n, por {event.buyprice} créditos\n\n{if type(event.sellmodule) != \"vacío\":\n    , y vendido un {event.sellmodule.name} de clase {event.sellmodule.class}-{event.sellmodule.grade},\n\n    {if type(event.sellmodule.mount) != \"vacío\":\n        {for index, value in event.sellmodule.mount: {set mount to value}}\n        {if mount = 0:\n            fijo\n        |elif mount = 1:\n            guiado\n       |elif mount = 2:\n            torreta\n        } \n    } \n    , por {event.sellprice} créditos\n\n|elif type(event.storedmodule) != \"vacío\":\n    , y almacenado un {event.storedmodule.name} de clase {event.storedmodule.class}-{event.storedmodule.grade},\n\n    {if type(event.storedmodule.mount) != \"vacío\":\n        {for index, value in event.storedmodule.mount: {set mount to value}}\n        {if mount = 0:\n            fijo\n        |elif mount = 1:\n            guiado\n       |elif mount = 2:\n            torreta\n        }\n    }\n}",
      "default": false,
      "name": "Module purchased",
      "description": "Se activa cuando compras un módulo"
    },
    "Module retrieved": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Recuperado {event.module.name} de clase {event.module.class}{event.module.grade} \n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo \n    |elif mount = 1:\n        guiado \n    |elif mount = 2:\n        torreta \n    } \n} \n\n del almacén,\n\n{if type(event.swapoutmodule) != \"vacío\":\n    y almacenado un {event.swapoutmodule.name} de clase {event.swapoutmodule.class}-{event.swapoutmodule.grade}\n\n    {if type(event.swapoutmodule.mount) != \"vacío\":\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\n        {if mount = 0:\n            fijo\n        |elif mount = 1:\n            guiado\n       |elif mount = 2:\n            torreta\n        }\n    }\n    \n},\n\n{if type(event.cost) != \"vacío\": por un coste de {event.cost} créditos}",
      "default": false,
      "name": "Module retrieved",
      "description": "Se activa cuando busca un módulo previamente almacenado"
    },
    "Module sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha vendido su {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    } \n},\n\n por {event.price}{if event.price > 999999: de} créditos.",
      "default": false,
      "name": "Module sold",
      "description": "Se activa cuando vende un módulo instalado en la nave"
    },
    "Module sold from storage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha vendido su {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo\n    |elif mount = 1:\n        guiado\n    |elif mount = 2:\n        torreta\n    } \n} \n\ndesde su almacén, por {event.price}{if event.price > 999999: de} créditos.",
      "default": false,
      "name": "Module sold from storage",
      "description": "Se activa cuando vende un módulo almacenado"
    },
    "Module stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Almacenado {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if type(event.module.mount) != \"vacío\":\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        fijo \n    |elif mount = 1:\n        guiado \n    |elif mount = 2:\n        torreta \n    } \n} \n \n\n\n{if type(event.cost) = \"vacío\": . |else: por un coste de {event.cost} créditos.}",
      "default": false,
      "name": "Module stored",
      "description": "Se activa cuando almacena un módulo"
    },
    "Module swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha intercambiado las posiciones de su {event.frommodule.name} de clase {event.frommodule.class}-{event.frommodule.grade}\n\n{if type(event.frommodule.mount) != \"void\":\n    {for index, value in event.frommodule.mount: {set mount to value}}\n    {if mount = 0:\n        de montura fija\n    |elif mount = 1:\n        de montura guiada\n    |elif mount = 2:\n        de torreta\n    }\n},\n\n por \n\n{if event.tomodule:\n    un {event.tomodule.name} de clase {event.tomodule.class}-{event.tomodule.grade},\n    {if type(event.tomodule.mount) != \"void\":\n        {for index, value in event.tomodule.mount: {set mount to value}}\n        {if mount = 0:\n            de montura fija\n        |elif mount = 1:\n            de montura guiada\n        |elif mount = 2:\n            de torreta\n        }\n    }\n    .\n|else: \n    en un anclaje vacío.\n}",
      "default": true,
      "name": "Module swapped",
      "description": "Se activa cuando se intercambian módulos entre ubicaciones de la nave"
    },
    "Module transfer": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Transferido {event.module.name} de clase {event.module.class}-{event.module.grade}\n\n{if event.module.mount:\n    {for index, value in event.module.mount: {set mount to value}}\n    {if mount = 0:\n        de montura fija\n    |elif mount = 1:\n        de montura guiada\n    |elif mount = 2:\n        de torreta\n    }\n},\n\n\n{if event.transfercost: por un importe de {event.transfercost} créditos.}\n\n{set t_remaining to event.transfertime}\n\n{if t_remaining:\n\n   {Pause(1000)}\n   Llegada prevista, en \n\n   {if t_remaining > (60*60*24):\n      {set t_days to floor(t_remaining/(60*60*24))}\n      {t_days} días,\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\n   }\n\n   {if t_remaining > 3600:\n      {set t_hours to floor(t_remaining/3600)}\n      {t_hours} horas,\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\n   }\n\n   {if t_remaining > 60:\n      {if t_days || t_hours: y }\n      {set t_minutes to round(t_remaining/(60),0)}\n      {t_minutes} minutos.\n   }\n}",
      "default": true,
      "name": "Module transfer",
      "description": "Se activa cuando se transfiere un módulo almacenado a otra estación espacial"
    },
    "Modules stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha almacenado los siguientes módulos:\n\n{for module in event.modules:\n\n    {module.name} de clase {module.class}-{module.grade},\n\n    {if type(module.mount) != \"void\":\n        {for index, value in module.mount: {set mount to value}}\n        {if mount = 0:\n            de montura fija\n        |elif mount = 1:\n            de montura guiada\n        |elif mount = 2:\n            de torreta\n        }\n    }\n    \n    {Pause(400)}\n}",
      "default": true,
      "name": "Modules stored",
      "description": "Se activa cuando se almacenan múltiples módulos"
    },
    "Music": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Music",
      "description": "Se activa cuando la música ambiental cambia"
    },
    "Nav beacon scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\n{SetState('eddi_context_last_subject', 'nav beacon')}\n{SetState('eddi_context_last_action', 'scan')}\n{SetState('eddi_context_star_system', system.name)}\n{SetState('eddi_context_nav_scans', event.numbodies)}\n\n{set nav to OneOf(\"navegación\")}\n{set beacon to OneOf(\"baliza de\")}\n{OneOf(\"Esta {beacon} {nav} ha enviado detalles de {event.numbodies} cuerpos estelares en este sistema\",\n \"Detalles recibidos sobre {event.numbodies} cuerpos estelares en este sistema.\")}\n\n{Pause(500)}",
      "default": true,
      "name": "Nav beacon scan",
      "description": "Se activa cuando se escanea una baliza de navegación, antes de que los datos de escaneo de todos los cuerpos celestes del sistema se escriban en el diario"
    },
    "Near surface": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Near surface",
      "description": "Se activa cuando se entra o se sale de la órbita de la superficie de un planeta"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Atención: ataque\n{if event.by:\n   por un {event.by} \n}\ndetectado.",
      "default": true,
      "name": "NPC attack commenced",
      "description": "Se activa cuando se detecta un ataque de un NPC sobre su nave"
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ See if we are carrying non-limpet cargo}\n{set carryingvaluablecargo to 0}\n{for cargo in ship.cargo:\n    {if cargo.commodity != 'Limpet':\n        {set carryingvaluablecargo to 1}\n    }\n}\n\n{if carryingvaluablecargo = 1:\n  Precaución: escaneo de carga\n  {if event.by:\n    por un {event.by} \n  }\n  detectado.\n}",
      "default": true,
      "name": "NPC cargo scan commenced",
      "description": "Se activa cuando se detecta un escaneo de la carga de su nave por un NPC"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Peligro: detectado un intento de interdicción\n{if event.by:\n   por un {event.by} \n}.\n\n{Occasionally(3, \"Apague motores y sométase, o prepárese para evadir la interdicción.\")}",
      "default": true,
      "name": "NPC interdiction commenced",
      "description": "Se activa cuando se detecta un intento de interdicción de su nave por un NPC"
    },
    "Power commodity delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} units of {event.commodity} delivered {Occasionally(2, \"for {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity delivered",
      "description": "Se activa cuando un Comandante entrega una mercancía a una potencia"
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Humanise(event.amount)} créditos gastados en un rápido rastreo de mercancías {Occasionally(2, \"para {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity fast tracked",
      "description": "Se activa cuando un Comandante rastrea rápidamente una mercancía de una potencia"
    },
    "Power commodity obtained": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Obtenidas {event.amount} unidades de {event.commodity} {Occasionally(2, \"para {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity obtained",
      "description": "Se activa cuando un Comandante obtiene una mercancía de una potencia"
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ha desertado de {P(event.frompower)} para unirse a {P(event.topower)}.",
      "default": true,
      "name": "Power defected",
      "description": "Se activa cuando deserta de una potencia para unirse a otra"
    },
    "Power expansion vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Voto\n{OneOf(\"emitido\", \"registrado\")}",
      "default": true,
      "name": "Power expansion vote cast",
      "description": "Se activa cuando un Comandante vota a favor de la expansión de un sistema"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Se ha alineado con {P(event.power)}",
      "default": true,
      "name": "Power joined",
      "description": "Se activa cuando se une a una potencia"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Ya no se encuentra alineado con {P(event.power)}",
      "default": true,
      "name": "Power left",
      "description": "Se activa cuando abandona una potencia"
    },
    "Power preparation vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Voto\n{OneOf(\"emitido\", \"registrado\")}",
      "default": true,
      "name": "Power preparation vote cast",
      "description": "Se activa cuando un Comandante vota por la preparación de un sistema"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Reclamado salario por importe de {Humanise(event.amount)} créditos {Occasionally(2, \"de {P(event.power)}\")}.",
      "default": true,
      "name": "Power salary claimed",
      "description": "Se activa cuando un Comandante reclama su salario de una potencia"
    },
    "Power voucher received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power voucher received",
      "description": "Se activa cuando se entrega un bono de combate en contra de una potencia opositora"
    },
    "Repair drone": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\n\n{if event.hull:\n   {set systemsrepaired to cat(systemsrepaired, [\"el casco\"])} \n}\n{if event.cockpit:\n   {set systemsrepaired to cat(systemsrepaired, [\"la cabina\"])} \n}\n{if event.corrosion:\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"sistemas corroidos\", \"sistemas afectados por corrosión\")])} \n}\n\n{if len(systemsrepaired) > 0:\n\n    {set remote to Occasionally(2, \"remotas\")}\n    {set sequence to OneOf(\"el drón ha\", \"Se han\")} \n    {OneOf(\n        \"{sequence} completado las reparaciones {remote} de\", \n        \"secuencia remota completa. {sequence} hecho las reparaciones en\",\n        \"ciclo completado. {sequence} finalizado las reparaciones {remote} en\"\n    )}\n\n    {set cur to 0}\n    {while cur < len(systemsrepaired):\n        {if cur = 0:\n        |elif cur < len(systemsrepaired) - 1:\n            , \n        |else:\n            and\n        }\n        {systemsrepaired[cur]}\n        {set cur to cur + 1}\n    }\n}.\n",
      "default": true,
      "name": "Repair drone",
      "description": "Se activa cuando su nave es reparada por medio de un controlador de drones"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "default": true,
      "name": "Repeat last speech",
      "description": "Repite lo último que se ha dicho"
    },
    "Report last scan value": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Context }\n{set scanValue to state.eddi_context_last_scan_estimated_value}\n\n{if scanValue:\n   {OneOf(\"Esto\", \"Esta información\", \"Este escaneo\")} \n   {OneOf(\"podría\", \"puede\", \"debería\") } \n   {OneOf(\"venderse por\", \"valer\", \"reportarle\", \"ponerse en venta por\")}\r\n\r\n\r\n{ if scanValue>999 && scanValue<1800:\n    unosmil créditos\n|else:\n   {Humanise(scanValue)} créditos.\n }\r\n}\n",
      "default": false,
      "name": "Report last scan value",
      "description": "Informa sobre el valor estimado del último cuerpo celeste escaneado"
    },
    "Screenshot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Screenshot",
      "description": "Se activa cuando se toma una captura de pantalla"
    },
    "Search and rescue": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"recuperado\", \"salvado\")}{if event.amount > 1:s}\n{event.amount}\n{if event.commodity.rare: raro}\n\n{if event.commodity.name = \"Cajas negras\":\n   {if event.amount > 1:\n      {OneOf(\" registros de vuelo\", \" cajas negras\")}\n   |else: \n      {OneOf(\" registro de vuelo\", \"a caja negra\")}\n   }\n\n|elif event.commodity.name = \"Cápsula de escape dañada\":\n   {if event.amount > 1:\n   {OneOf(\" cápsulas criogénicas dañadas\", \" cápsulas de escápe dañadas\")}\n   |else:\n   {OneOf(\"a cápsula criogénica dañada\", \"a cápsula de escápe dañada\")}\n   }\n\n|elif event.commodity.name = \"Cápsula de escape ocupada\":\n   {if event.amount > 1:\n   {OneOf(\" cápsulas criogénicas ocupadas\", \" cápsulas de escápe ocupadas\")}\n   |else:\n   {OneOf(\"a cápsula criogénica ocupada\", \"a cápsula de escápe ocupada\")}\n   }\n\n|elif event.commodity.name = \"Efectos personales\":\n   {OneOf(\"conjunto\", \"bulto\")}{if event.amount > 1:s} de\n   {OneOf(\"objetos personales\", \"recuerdos personales\")}\n\n|elif event.commodity.name = \"Restos de accidentes\":\n   {set wreckage to OneOf(\"escombros\", \"restos\", \"resíduos\", basura espacial)}\n   {set fragment to tonelada}\n   {OneOf(\"{fragment}{if event.amount > 1:s} de {wreckage}\", \n          \"{fragment}{if event.amount > 1:s} de {wreckage} provenientes de accidentes\")}\n\n|elif event.commodity.name = \"Rehenes\":\n   {OneOf(\"rehen\")}{if event.amount > 1:es}\n\n|else:\n   tonelada{if event.amount > 1:s} de {event.commodity.name},\n}\n\npor {(event.reward)} créditos\n",
      "default": true,
      "name": "Search and rescue",
      "description": "Se activa cuando se entregan elementos a un contacto de Búsqueda y Rescate"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.population > 0:\n    {OneOf ('los sensores detectan','detecto')} \n\n    {if system.security = \"None\":\n        OneOf(\"una falta total\",\"una ausencia total\", \"la inexistencia\")\n    |elif system.security = \"Low\":\n        {OneOf(\"una mínima presencia\", \"una baja presencia\", \"muy poca presencia\",\"escasa presencia\")}\n    |elif system.security = \"Medium\":\n        {OneOf(\"un nivel medio\", \"alguna presencia\", \"cierta presencia\")}\n    |elif system.security = \"High\":\n        {OneOf(\"una alta presencia\", \"una fuerte presencia\", \"una abundante presencia\")}\n    |else:\n        {system.security}\n    } \n    {OneOf(\"de fuerzas policiales\", \"de seguridad\", \"de agentes de la ley\",\"de agentes de seguridad\")} {OneOf(\"por aquí\", \"en este sistema\", \"en esta zona\")}.\n}",
      "default": true,
      "name": "Security presence report",
      "description": "Función para informar sobre los detalles del nivel de seguridad del sistema"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Secuencia de autodestrucción iniciada. Cerrando orificios de ventilación.",
      "default": true,
      "name": "Self destruct",
      "description": "Se activa cuando comienza la secuencia de auto destrucción"
    },
    "Settlement approached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Settlement approached",
      "description": "Se activa cuando se aproxima a un asentamiento"
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Shields down",
      "description": "Se activa cuando los escudos de la nave se desconectan"
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Shields up",
      "description": "Se activa cuando los escudos de la nave se activan"
    },
    "Ship arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, '{F(\\'Honorific\\')}, ')}\nSu {event.ship} ha \n\n{OneOf('llegado a {if station.name != event.station && event.station:}', \n       'completado su transferencia a {if station.name != event.station && event.station:}')}\n\n{if station.name != event.station && event.station:\n   {event.station}\n   {if system.name != event.system && event.system:\n      en el sistema  {event.system}\n   }\n}.",
      "default": true,
      "name": "Ship arrived",
      "description": "Se activa cuando se completa la transferencia de una nave a otro sistema"
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipCallsign()} entrega completada.",
      "default": true,
      "name": "Ship delivered",
      "description": "Se activa cuando se le hace entrega de una nave recién comprada"
    },
    "Ship fsd": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship fsd",
      "description": "Se activa cuando hay un cambio en el estado del FSD de su nave"
    },
    "Ship interdicted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship interdicted",
      "description": "Se activa cuando su nave es interdictada por otra"
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship interdiction",
      "description": "Se activa cuando interdicta a otra nave"
    },
    "Ship loadout": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship loadout",
      "description": "Se activa cuando obtienes carga a tu nave"
    },
    "Ship low fuel": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Bajo combustible de la nave",
      "description": "Se activa cuando el combustible de la nave cae por debajo del 25%"
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{P(event.ship)} adquirida.",
      "default": true,
      "name": "Nave adquirida",
      "description": "Se activa cuando compra una nave"
    },
    "Ship rebooted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship rebooted",
      "description": "Se activa cuando efectúa un reinicio o una reparación en su nave"
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.total:\n   {SetState('eddi_context_fuel_remaining', event.total)}\n|else:\n   {SetState('eddi_context_fuel_remaining', state.eddi_context_fuel_remaining + event.amount)}\n}\n\n{Pause(2000)}\n{if event.total = ship.fueltanktotalcapacity || event.price:\n   {set refueled_desc to OneOf(\"completamente repostada\", \n    \"al máximo de su capacidad de combustible\",\n    \"al 100% de su capacidad de combustible\")}\n   {OneOf(\"Combustible repostado\", \"Combustible al máximo\", \n    \"Depósito de combustible lleno\", \n    \"{P(ShipName())} está {refueled_desc}\" )}\n|else:\n   {if event.amount <= 5.0000:\n      {F('Fuel check')}\n   }\n}",
      "default": true,
      "name": "Ship refuelled",
      "description": "Se activa cuando se reposta combustible en su nave"
    },
    "Ship renamed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} registrada en {system.faction}.  Su identificación es {ICAO(event.ident)}.",
      "default": true,
      "name": "Ship renamed",
      "description": "Se activa cuando se cambia el nombre de una nave"
    },
    "Ship repaired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} reparada.",
      "default": true,
      "name": "Ship repaired",
      "description": "Se activa cuando se repara su nave"
    },
    "Ship repurchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship repurchased",
      "description": "Se activa cuando se recompra su nave"
    },
    "Ship restocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} {OneOf(\"reaprovisionada\",\"rearmada\")}.",
      "default": true,
      "name": "Ship restocked",
      "description": "Se activa cuando se recarga la munición de su nave"
    },
    "Ship shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship shutdown",
      "description": "Se activa cuando se desconectan los sistemas de su nave"
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Retirada {ShipName(event.shipid, event.ship)} del servicio activo\",\n             \"{ShipName(event.shipid, event.ship)} Dada de baja\",\n             \"{ShipName(event.shipid, event.ship)} vendida\",)}\n\n{if event.system != system.name:\n   en el sistema {event.system}\n}",
      "default": true,
      "name": "Ship sold",
      "description": "Se activa cuando se vende una nave"
    },
    "Ship sold on rebuy": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.ship}, con identificación {event.shipid}, vendida en {event.system} por {event.price} créditos",
      "default": true,
      "name": "Ship sold on rebuy",
      "description": "Se activa cuando se vende una nave para obtener fondos para el seguro o recompra de la nave"
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.storedship:\n    {OneOf(\"Almacenando\", \"Aparcando\", \"Almacenando\")} {ShipName(event.storedshipid, event.storedship)} y\n|elif event.soldship:\n    Vendiendo {ShipName(event.soldshipid, event.soldship)} y\n}\n{OneOf(\"intercambiando\",\"moviendo\",\"transfiriendo\")} a {ShipName(event.shipid, event.ship)}.\n\n{F(\"Limpet check\")}\n{F(\"List launchbays\")}\n\n{set fighterhangar to false}\n{for compartment in ship.compartments:\n    {if find(compartment.module.name, \"Fighter Hangar\") != -1:\n        {set fighterhangar to true}\n    }\n}\n{if fighterhangar = true:\n    Recuerde: debe asignar un miembro del equipo al servicio activo\n}\n",
      "default": true,
      "name": "Ship swapped",
      "description": "Se activa cuando se cambia de nave"
    },
    "Ship targeted": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Ship targeted }\r\n{_ Triggered when the player selects a target }\r\n\r\n{_ event Parameters:   targetlocked - bool (ie false when losing target) }\r\n{_ If target locked:   name (of ship), scanstage (ie 0, 1, 2, 3) }\r\n{_ If Scan stage >= 1: name (of pilot), rank (of pilot) }\r\n{_ If scan stage >= 2: shieldhealth, hullhealth (both 0-100) }\r\n{_ If scan stage >= 3: faction, legalstatus (ie clean, wanted, etc), bounty (if appicable), }\r\n{_                     subsystem (ie FSD, power plant, etc), subsystemhealth (0-100) }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'ship')}\r\n{SetState('eddi_context_last_action', 'targeted')}\r\n\r\n{if event.targetlocked && event.scanstage > 2:\r\n    {set legalstatus to event.legalstatus}\r\n    {if legalstatus = \"Wanted\" || legalstatus = \"Wanted Enemy\" || legalstatus = \"Warrant\":\r\n        {event.name} {OneOf(\"has a bounty\", \"is fair game\", \"is a legitimate target\")}.\r\n    }\r\n}\r\n\r\n",
      "default": true,
      "name": "Ship targeted",
      "description": "Triggered when the player selects a target"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName(event.shipid, event.ship)} {OneOf(\"en camino\",\"está siendo transferida\", \"transferencia iniciada\", \"está siendo transportada\", \"está siendo transferida\")} desde {P(event.system)}.\n\n{if event.transfercost: por un coste de {event.price} créditos.}\n\n{set t_remaining to event.time}\n\n{if t_remaining:\n\n   {Pause(1000)}\n   Llegada prevista, en \n\n   {if t_remaining > (60*60*24):\n      {set t_days to floor(t_remaining/(60*60*24))}\n      {t_days} días,\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\n   }\n\n   {if t_remaining > 3600:\n      {set t_hours to floor(t_remaining/3600)}\n      {t_hours} horas,\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\n   }\n\n   {if t_remaining > 60:\n      {if t_days || t_hours: and}\n      {set t_minutes to round(t_remaining/(60),0)}\n      {t_minutes} minutos.\n   }\n}",
      "default": true,
      "name": "Ship transfer initiated",
      "description": "Se activa cuando se inicia la transferencia de una nave a otro sistema"
    },
    "Shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Shutdown",
      "description": "Se activa cuando se hace un cierre limpio del juego"
    },
    "Signal detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Signal detected",
      "description": "Triggered when a signal source is detected"
    },
    "Silent running": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Silent running",
      "description": "Triggered when you activate or deactivate silent running"
    },
    "SRV docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Bugui\", \"uve erre ese\")} {OneOf(\"embarcado\",\"recogido\")}",
      "default": true,
      "name": "SRV docked",
      "description": "Se activa cuando embarca un VRS en su nave"
    },
    "SRV launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Bugui\", \"uve erre ese\")} {OneOf(\"lanzado\", \"fuera\",\"desplegado\")}{Occasionally (2,OneOf(\"-comandante\",\"-señor\"))}.",
      "default": true,
      "name": "SRV launched",
      "description": "Se activa cuando se desembarca un VRS desde su nave"
    },
    "SRV turret": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "SRV turret",
      "description": "Se activa cuando despliega o repliega la torreta de armas de su VRS"
    },
    "SRV turret deployable": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if !event.deployable:\n   {OneOf(\"Bugui\", \"VRS\")} esperando para embarque.\n}",
      "default": true,
      "name": "SRV turret deployable",
      "description": "Se activa cuando su VRS entra o sale de la zona de seguridad de alrededor de su nave"
    },
    "Star report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if !reportbody.name || reportbody.name = \"\":\n    No consigo saber a que estrella se refiere\n|else:\n    {set mainsequence to 0}\n    {P(reportbody.name)} es\n    {if reportbody.stellarclass = \"O\":\n        una estrella de secuencia principal increíblemente rara {OneOf(\"de ver\",\"\")}\n        {set mainsequence to 1}\n    |elif reportbody.stellarclass = \"B\":\n        una estrella de secuencia principal muy rara {OneOf(\"de ver\",\"\")}\n        {set mainsequence to 1}\n    |elif reportbody.stellarclass = \"A\":\n        una estrella de secuencia principal particularmente rara {OneOf(\"de ver\",\"\")}\n        {set mainsequence to 1}\n    |elif reportbody.stellarclass = \"F\":\n        una estrella de secuencia principal poco común\n        {set mainsequence to 1}\n    |elif reportbody.stellarclass = \"G\":\n        una común estrella de secuencia principal\n        {set mainsequence to 1}\n    |elif reportbody.stellarclass = \"K\":\n        una estrella de secuencia princial bastante común {OneOf(\"de encontrar\",\"\")}\n        {set mainsequence to 1}\n    |elif reportbody.stellarclass = \"M\":\n        una típica estrella de secuencia principal {OneOf(\"muy común\",\"\")}\n        {set mainsequence to 1}\n    |elif find([\"L\", \"T\", \"Y\"], reportbody.stellarclass) > -1:\n        una enana marrón\n    |elif reportbody.stellarclass = \"TTS\":\n        una estrella T tauri, en proceso de {OneOf(\"colapso gravitatorio\",\"colapso gravitacional\",\"contracción gravitacional\",\"convertirse en un posible agujero negro, estrella de neutrones, o supernova\")}\n    |elif reportbody.stellarclass = \"AEBE\":\n        una protoestrella muy joven, que aún no ha empezado su secuencia principal {Occasionally(4, \", pero está en camino de convertirse en una estrella de clase A, o B\")}\n    |elif reportbody.stellarclass = \"WC\":\n        una estrella Wolf-Rayet, rica en carbono{Occasionally(2, \", de combustión rápida\")} \n        {Occasionally(2, \", con una pérdida considerable de su masa, y exponiendo carbono ionizado a su núcleo, \")}\n    |elif reportbody.stellarclass = \"WN\":\n        una estrella Wolf-Rayet, rica en helio y nitrógeno{Occasionally(2, \" de combustión rápida\")}\n        {Occasionally(2, \", con una pérdida considerable de su masa, y exponiendo helio ionizado y nitrógeno a su núcleo, \")}\n    |elif reportbody.stellarclass = \"WO\":\n        una estrella Wolf-Rayet rica en oxígeno{Occasionally(2, \" de combustión rápida\")} \n        {Occasionally(2, \",  con una pérdida considerable de su masa, y exponiendo oxígeno ionizado a su núcleo, \")}\n    |elif reportbody.stellarclass = \"WNC\":\n        una estrella Wolf-Rayet{Occasionally(2, \" de combustión rápida\")} \n        {Occasionally(2, \", con una pérdida considerable de su masa, y exponiendo a su núcleo, nitrógeno ionizado, carbono, oxígeno, y helio, \")}\n    |elif reportbody.stellarclass = \"W\":\n        una estrella Wolf-Rayet{Occasionally(2, \" de combustión rápida\")} \n        {Occasionally(2, \", con una pérdida considerable de su masa, y exponiendo a su núcleo todos los elementos mas pesados, \")}\n    |elif reportbody.stellarclass = \"CS\":\n        una estrella de carbono\n    |elif find([\"C\", \"CN\", \"CH\", \"CHd\"], reportbody.stellarclass) > -1:\n        una estrella de carbono{Occasionally(2, \", de tipo tardío\")}{Occasionally(4, \", con una atmósfera dominada por el carbono\")}\n    |elif reportbody.stellarclass = \"CJ\":\n        una estrella de carbono{Occasionally(2, \", de tipo tardío\")}{Occasionally(2, \", con altos niveles de carbono 13 en su atmósfera\")}\n    |elif reportbody.stellarclass = \"MS\":\n        una estrella de tipo tardío{Occasionally(4, \", que antes fue una Estrella Clase M, y ahora está en camino de convertirse en una de carbono\")}\n    |elif reportbody.stellarclass = \"S\":\n        una estrella de tipo tardío{Occasionally(4, \", que antes fue una Estrella Clase M, y que ahora se está convirtiendo ya en una de carbono\")}\n    |elif reportbody.stellarclass = \"D\":\n        una enana blanca\n    |elif reportbody.stellarclass = \"DA\":\n        una enana blanca{Occasionally(4, \" con una atmósfera rica en hidrógeno\")}\n    |elif reportbody.stellarclass = \"DAB\":\n        una enana blanca{Occasionally(4, \" con una atmósfera rica en hidrógeno y helio\")}\n    |elif slice(reportbody.stellarclass, 0, 1) = \"D\":\n        una enana blanca\n    |elif slice(reportbody.stellarclass, 0, 1) = \"N\":\n        una estrella de neutrones {Occasionally(4, \" las cuales tienen un peligroso núcleo de alta densidad\")}\n    |elif reportbody.stellarclass = \"H\":\n        un agujero negro\n    |elif reportbody.stellarclass = \"X\":\n        una entidad estelar muy exótica...\n    |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\n        un agujero negro supermasivo\n    |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\n        una supergigante blanco-azulada{Occasionally(4, \", que se está expandiendo hacia convertirse en una supergigante roja\")}\n    |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\n        una supergigante amarilla {Occasionally(4, \", que se está expandiendo hacia convertirse en una supergigante roja\")}\n    |elif reportbody.stellarclass = \"M_RedSuperGiant\":\n        una supergigante roja{Occasionally(4, \", en su fase de combustión de helio\")}\n    |elif reportbody.stellarclass = \"M_RedGiant\":\n        una gigante roja {Occasionally(4, \", que se está expandiendo hacia convertirse en supergigante\")}\n    |elif reportbody.stellarclass = \"K_OrangeGiant\":\n        una gigante naranja {Occasionally(4, \", que se expande mientras se dirige hacia el final de su vida\")}\n    |elif reportbody.stellarclass = \"RoguePlanet\":\n        un planeta {OneOf(\"interestelar\",\"vagabundo\",\"errante\",\"huérfano\")}\n    |elif reportbody.stellarclass = \"Nebula\":\n        una nebulosa\n    |elif reportbody.stellarclass = \"StellarRemnantNebula\":\n        un{OneOf(\"a nebulosa remanente\",\" remanente de Supernova\")}\n    |else:\n        una estrella clase {Spacialise(reportbody.stellarclass)}\n    }\n    \n    {set ageInYears to reportbody.age * 1000000}\n    {if reportbody.age > 0:\n        {OneOf(\"Que existe desde hace unos {Humanise(ageInYears)} de años\",\n               \"que tiene {Humanise(ageInYears)} de años de vida\",\n               \"de {Humanise(ageInYears)} de años\",\n        )}\n    |else:\n        que existe solo desde hace menos de un millón de años,\n    }\n    {if ageInYears < 1000000:\n        por lo que es una de las estrellas más jóvenes de la galaxia\n    |elif ageInYears >14000000000:\n        por lo que es una de las estrellas más {OneOf(\"lonjevas\",\"viejas\",\"ancianas\",\"mayores\")} de la galaxia\n    }.\n\n    {if mainsequence = 1:\n        {Occasionally(2,\"Como se puede apreciar, emite una luz {reportbody.chromaticity}.\")}\n\n        {set notables to []}\n\n        {if reportbody.massprobability < 0.01:\n            {set notables to cat(notables, [cat(\"una masa solar increíblemente baja de \", Humanise(reportbody.solarmass))])}\n        |elif reportbody.massprobability < 0.1:\n            {set notables to cat(notables, [cat(\"una extrema baja masa solar de \", Humanise(reportbody.solarmass))])}\n        |elif reportbody.massprobability < 1:\n            {set notables to cat(notables, [\"una inusual baja masa solar de \"])}\n        |elif reportbody.massprobability < 10:\n            {set notables to cat(notables, [\"una masa solar inferior a la media\"])}\n        |elif reportbody.massprobability > 99.99:\n            {set notables to cat(notables, [cat(\"una masa solar increiblemente alta de \", Humanise(reportbody.solarmass))])}\n        |elif reportbody.massprobability > 99.9:\n            {set notables to cat(notables, [cat(\"una extremadamente alta masa solar de \", Humanise(reportbody.solarmass))])}\n        |elif reportbody.massprobability > 99:\n            {set notables to cat(notables, [\"una inusual alta masa solar de \"])}\n        |elif reportbody.massprobability > 90:\n            {set notables to cat(notables, [\"una masa solar mayor a la media\"])}\n        }\n\n        {if reportbody.radiusprobability < 0.01:\n            {set notables to cat(notables, [cat(\"un radio solar increiblemente bajo de \", Humanise(reportbody.solarradius))])}\n        |elif reportbody.radiusprobability < 0.1:\n            {set notables to cat(notables, [cat(\"un radio solar extremadamente bajo de \", Humanise(reportbody.solarradius))])}\n        |elif reportbody.radiusprobability < 1:\n            {set notables to cat(notables, [\"un inusual radio solar bajo\"])}\n        |elif reportbody.radiusprobability < 10:\n            {set notables to cat(notables, [\"un radio solar menor que la media\"])}\n        |elif reportbody.radiusprobability > 99.99:\n            {set notables to cat(notables, [cat(\"un radio solar increiblemente alto de \", Humanise(reportbody.solarradius))])}\n        |elif reportbody.radiusprobability > 99.9:\n            {set notables to cat(notables, [cat(\"un radio solar extremadamente bajo de \", Humanise(reportbody.solarradius))])}\n        |elif reportbody.radiusprobability > 99:\n            {set notables to cat(notables, [\"un radio solar inualmente bajo\"])}\n        |elif reportbody.radiusprobability > 90:\n            {set notables to cat(notables, [\"un radio solar mayor que la media\"])}\n        }\n\n        {if reportbody.tempprobability < 0.01:\n            {set notables to cat(notables, [cat(\"una increiblemente baja temperatura de superficie de \", Humanise(reportbody.temperature), \" grados kelvin\")])}\n        |elif reportbody.tempprobability < 0.1:\n            {set notables to cat(notables, [cat(\"una extremadamente baja temperatura de superficie de \", Humanise(reportbody.temperature), \" grados kelvin\")])}\n        |elif reportbody.tempprobability < 1:\n            {set notables to cat(notables, [\"una inusual baja temperatura de superficie\"])}\n        |elif reportbody.tempprobability < 10:\n            {set notables to cat(notables, [\"una temperatura de superficie mas baja que la media\"])}\n        |elif reportbody.tempprobability > 99.99:\n            {set notables to cat(notables, [cat(\"una extrema alta temperatura de superficie de \", Humanise(reportbody.temperature), \" grados kelvin\")])}\n        |elif reportbody.tempprobability > 99.9:\n            {set notables to cat(notables, [cat(\"una temperatura de superficie increiblemente alta de \", Humanise(reportbody.temperature), \" grados kelvin\")])}\n        |elif reportbody.tempprobability > 99:\n            {set notables to cat(notables, [\"una inusual alta temperatura de superficie\"])}\n        |elif reportbody.tempprobability > 90:\n            {set notables to cat(notables, [\"una temperatura de superficie mayor que la media\"])}\n        }\n\n        {if len(notables) = 0:\n            {OneOf(\"\", \"Esta es un claro ejemplo de esta clase de estrellas.\", \"No hay nada destacable en este estrella.\", \"de su clase, está dentro de la media.\")}\n        |else:\n            {OneOf('Comparado con otras estrellas de su clase', 'En comparación con otras estrellas de clase  {reportbody.stellarclass}', 'Si la comparamos con otras estrellas de clase {reportbody.stellarclass}')}, esta estrella es\n            {if len(notables) = 1:\n                notable por tener {notables[0]}.\n            |elif len(notables) = 2:\n                {OneOf('interesante', 'inusual')}, con {notables[0]} y {notables[1]}.\n            |elif len(notables) = 3:\n                {OneOf('excepcional', 'remarcable')}, con {notables[0]}, {notables[1]} y {notables[2]}.\n            }\n        }\n    }    \n}",
      "default": true,
      "name": "Star report",
      "description": "Función para informar de los detalles del objeto estelar contextual"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'star')}\n{SetState('eddi_context_last_action', 'scan')}\n{SetState('eddi_context_star_system', system.name)}\n{SetState('eddi_context_star_star', event.name)}\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\n\n{Pause(1000)}\n\nAnálisis de estrella clase {event.stellarclass}. {OneOf(\"completado\", \"completo\", \"finalizado\")}.\n\n{F(\"Star report\")}.\n\n{F(\"Report last scan value\")}\n\n{if (event.estimatedhabzoneinner && event.estimatedhabzoneouter) && \n (event.estimatedhabzoneinner > 0 && event.estimatedhabzoneouter> 0):\n   Zona habitable\n   {Occasionally(2, OneOf(\"detectada desde\", \"existente desde\"))}: \n   {Humanise(event.estimatedhabzoneinner)} \n   hasta {Humanise(event.estimatedhabzoneouter)} \n   segundos luz.\n|elif event.estimatedhabzoneouter && event.estimatedhabzoneouter > 0:\n   Zona habitable\n   {Occasionally(2, OneOf(\"detectada a un máximo de\", \"existente a una distancia máxima de\"))}: \n   {Humanise(event.estimatedhabzoneouter)} \n   segundos luz.\n}",
      "default": true,
      "name": "Star scanned",
      "description": "Se activa cuando completa un escaneo de un cuerpo estelar"
    },
    "Station no fire zone entered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone entered",
      "description": "Se activa cuando su nave entra en la zona de seguridad de una estación espacial"
    },
    "Station no fire zone exited": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone exited",
      "description": "Se activa cuando su nave abandona la zona de seguridad de una estación espacial"
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "No hay nada interesante aquí",
      "default": true,
      "name": "Station report",
      "description": "Función para informar sobre los detalles de la actual estación espacial"
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDDBID = module.EDDBID:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    Puede ahorrar {saving} créditos cambiando su {shipmodule.name} aquí.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Swapout check",
      "description": "Comprueba si algún módulo de los instalados en la nave está disponible más barato en la ubicación actual"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Síntesis completada.",
      "default": true,
      "name": "Synthesised",
      "description": "Se activa cuando se realiza alguna síntesis utilizando materiales"
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\n\n{if !reportsystem.name || reportbody.name = \"\":\n   No tengo la certeza sobre a qué sistema se refiere.\n|else:\n    La distancia a {P(reportsystem.name)} es de {Humanise(Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} años luz.\n}\n\n\n\n",
      "default": true,
      "name": "System distance report",
      "description": "Función para informar sobre la distancia al sistema contextual"
    },
    "System faction changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "System faction changed",
      "description": "Se activa cuando hay algún cambio en la facción que controla un sistema vigilado"
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\n\n{if !reportsystem.name || reportbody.name = \"\":\n    No tengo la certeza sobre a qué sistema se refiere\n|else:\n    {P(reportsystem.name)} es un sistema \n\n    {if reportsystem.population && reportsystem.population > 0:\r\n\r\n        {if reportsystem.government = \"Colonia prisión\": \r\n          Colonia prisión\r\n        |elif reportsystem.government = \"Anarquía:\r\n          Anárquico\r\n        |elif reportsystem.government = \"Colonia\":\r\n          Colonial\r\n        |elif reportsystem.government = \"Communismo\":\r\n          Comunista\r\n        |elif reportsystem.government = \"Confederación\":\r\n          Confederado\r\n        |elif reportsystem.government = \"Cooperativa\":\r\n          Cooperativo\r\n        |elif reportsystem.government = \"Corporación\":\r\n          Corporativo\r\n        |elif reportsystem.government = \"Democracia\":\r\n          Demócrata\r\n        |elif reportsystem.government = \"Dictadurap\":\r\n          Dictatorial\r\n        |elif reportsystem.government = \"Feudal\":\r\n          Feudal\r\n        |elif reportsystem.government = \"Imperio\":\r\n          Imperialista\r\n        |elif reportsystem.government = \"Patronazgo\":\r\n          Patronal\r\n        |elif reportsystem.government = \"Teocracia\":\r\n          Teocrático\r\n        |elif reportsystem.government = \"Taller\":\r\n          Taller\r\n        |elif reportsystem.government = \"Engineer\":\r\n          Tecnológico\n            \n            \n        {if reportsystem.allegiance = \"La Federación\":\n            de la Federación\n        |elif reportsystem.allegiance = \"El Imperio\":\n            del Imperio\n        |else:\n            independiente\n        }\n\n        |else:\n          \n        }\n        {OneOf(\"de\", \"con una población de\", \"que acoje a\")} {Humanise(reportsystem.population)}{if reportsystem.population > 1999999:es} de habitantes\n        {if reportsystem.power:\n            , {OneOf(\"alineados con\", \"aliados con\", \"controlados por\")} {P(reportsystem.power)}\n        }.\n\n        {if reportsystem.faction:\n          {P(reportsystem.faction)} es la {OneOf(\"potencia\", \"facción\")} {OneOf(\"dominante\", \"local\", \"que gobierna\")}.\n        }\n\n        {if len(reportsystem.stations) = 0:\n          No hay ninguna estación presente\n        |else:\n            {if len(reportsystem.orbitalstations) = 0:\n                {if len(reportsystem.planetarystations) = 1:\n                    Hay {OneOf(\"una sola\", \"solo una\", \"una solitaria\", \"una\")} estación planetaria\n                |else:\n                    Hay {len(reportsystem.planetarystations)} estaciones planetarias\n                }\n            |elif len(reportsystem.orbitalstations) = 1:\n                Hay {OneOf(\"una sola\", \"solo una\", \"una solitaria\", \"una\")} estación orbital\n                {if len(reportsystem.planetarystations) = 1:\n                    y {OneOf(\"una sola\", \"solo una\", \"una\")} estación planetaria\n                |elif len(reportsystem.planetarystations) > 1:\n                    y {len(reportsystem.planetarystations)} estaciones planetarias\n                }\n            |else:\n                Hay {len(reportsystem.orbitalstations)} estaciones orbitales\n                {if len(reportsystem.planetarystations) = 1:\n                    y {OneOf(\"una sola\", \"solo una\", \"una\")} estación planetaria\n                |elif len(reportsystem.planetarystations) > 1:\n                    y {len(reportsystem.planetarystations)} estaciones planetarias\n                }\n            }\n        }\n        en este sistema\n    |else:\n       {OneOf(\"inhabitado\",\"despoblado\",\"sin habitantes\",\"sin ningún habitante\",\"sin ninguna población\")}\n   }.\n}",
      "default": false,
      "name": "System report",
      "description": "Función para informar sobre los detalles del sistema estelar contextual"
    },
    "System state changed": {
      "enabled": false,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'system')}\n{SetState('eddi_context_last_action', 'change_state')}\n{SetState('eddi_context_system', event.system)}\n{SetState('eddi_context_system_system', event.system)}\n\n{_ Set up our system name}\n{if event.system = homesystem.name:\n  {set system to OneOf('{P(event.system)}',\n                       'Tu sistema hogar')}\n|elif event.system = system.name:\n  {set system to OneOf('{P{event.system)}',\n                       'este sistema')}\n|else:\n  {set system to OneOf('sistema {P(event.system)}'\n                       '{P(event.system)}'))}\n}\n\n{if event.newstate != 'None':\n  {_ System has entered a new state}\n  {OneOf('Las transmisiones locales informan que', 'Información: ', 'Transmisión interceptada. Informan que ')}\n  {if event.newstate = 'Boom':\n    {OneOf('{system} está experimentando un auge comercial',\n           '{system} está entrando en un período de mayor éxito comercial')}\n  |elif event.newstate = 'Bust':\n    {system} está experimentando dificultades económicas\n  |elif event.newstate = 'Civil Unrest':\n    {OneOf('{system} está experimentando disturbios civiles',\n           'hay disturbios en el {system} system')}\n  |elif event.newstate = 'Civil War':\n    {OneOf('{system} está en guerra con otra facción en el mismo sistema',\n           'una guerra civil estalló en {system}',\n           '{system} ha caído en una guerra civil',\n           'han estallado hostilidades en {system}')}\n  |elif event.newstate = 'Election':\n    {system} está pasando por elecciones\n  |elif event.newstate = 'Expansion':\n    {OneOf(\"una facción en {system} está intentando expandirse a un sistema vecino\",\n           \"una facción en {system} está preparándose para expandirse a un sistema vecino\")}\n  |elif event.newstate = 'Famine':\n    {system} está sufriendo hambruna\n  |elif event.newstate = 'Investment':\n    En {system} la facción controladora está invirtiendo fuertemente en su infraestructura local\n  |elif event.newstate = 'Lockdown':\n    {system} ha aumentado la seguridad debido a un bloqueo por parte de la facción dominante\n  |elif event.newstate = 'Outbreak':\n    {system} sufre de un brote de enfermedad contagiosa\n  |elif event.newstate = 'Retreat':\n    La facción que controla {system} se está retirando de un sistema vecino\n  |elif event.newstate = 'War':\n    {system} ahora está en guerra con un sistema vecino\n  |else:\n   el {OneOf('{system} ha entrado en {event.state}',\n           '{system} ahora está en {event.state}')}\n  }.\n}\n\n",
      "default": true,
      "name": "System state changed",
      "description": "Se activa cuando hay un cambio en el estado de un sistema vigilado"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportsystem.name = \"\":\r\n    No tengo claro a que sistema se refiere.\r\n|elif reportsystem.state && reportsystem.state != 'None':\r\n    {P(reportsystem.name)}\r\n    {if reportsystem.state = \"Retreat\":\r\n        está en retirada\r\n    |elif reportsystem.state = \"War\":\r\n        está en guerra; se recomienda precaución\r\n    |elif reportsystem.state = \"Boom\":\r\n        está experimentando un auge económico; podría hacer buenos negocios\r\n    |elif reportsystem.state = \"Civil Unrest\":\r\n        está experimentando disturbios civiles; se recomienda precaución\r\n    |elif reportsystem.state = \"Civil War\":\r\n        está en guerra civil; se recomienda precaución\r\n    |elif reportsystem.state = \"Famine\":\r\n        hay hambruna; se recomienda precaución\r\n    |elif reportsystem.state = \"Lockdown\":\r\n        está en bloqueo; se recomienda precaución\r\n    |elif reportsystem.state = \"Outbreak\":\r\n        está tratando de contener un brote de enfermedad; se recomienda precaución\r\n    |elif reportsystem.state = \"Expansion\":\r\n        se está preparando para expandirse a otro sistema\r\n    |elif reportsystem.state = \"Bust\":\r\n        está en quiebra\r\n    |elif reportsystem.state = \"Election\":\r\n        está en periodo electoral\r\n    |elif reportsystem.state = \"Investment\":\r\n        está invirtiendo en infraestructuras\r\n    }\r\n    .\r\n}",
      "default": true,
      "name": "System state report",
      "description": "Informa sobre el estado actual del sistema contextual"
    },
    "Technology broker": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Technology broker",
      "description": "Se activa cuando se utiliza el Broker de Tecnología para desbloquear nuevos elementos"
    },
    "Touchdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\n\n{if event.playercontrolled = true:\n  Hemos aterrizado {if body.name: en {body.name} }.\n|else:\n  {ShipName()} ha aterrizado\n  {if body.name: en {body.name} }.\n}\n\n\n{Pause(2000)}\n\n{if type(event.latitude) != \"void\" && type(event.longitude) != \"void\" :\n   Las coordenadas son: {round(event.latitude, 2)} grados de latitud, y {round(event.longitude, 2)} grados de longitud.\n}",
      "default": true,
      "name": "Touchdown",
      "description": "Se activa cuando su nave aterriza en la superficie de un planeta"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\n{SetState('eddi_context_last_subject', 'tradedata')}\n{SetState('eddi_context_last_action', 'buy')}\n{SetState('eddi_context_tradedata_name', event.system)}\n\n{OneOf(\"Adquiridos datos de comercio del sistema {event.system}\",\n            \"Datos comerciales del sistema {event.system} disponibles\",\"Datos comerciales del sistema {event.system} recibidos correctamente\"\n            \"Recibidos datos comerciales del sistema {event.system} desde los servicios de la estación\",\n            \"Recepción de datos comerciales del sistema {event.system} confirmada\")}.",
      "default": true,
      "name": "Trade data purchased",
      "description": "Se activa cuando compra datos de comercio"
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{F(\"Honorific\")}, se ha reconocido su habilidad como comerciante.",
      "default": true,
      "name": "Trade promotion",
      "description": "Se activa cuando aumenta su rango de comercio"
    },
    "Trade voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\nDevengados {event.amount} créditos en vales de comercio\r\n{Occasionally(2, \"\r\n  {if len(event.rewards) = 1:\r\n    por parte de la facción {event.rewards[0].faction}\r\n  |else:\r\n    por parte de \r\n    {set cur to 0}\r\n    {while cur < len(event.rewards):\r\n        {if cur = 0:\r\n        |elif cur < len(event.rewards) - 1:\r\n            , \r\n        |else:\r\n            y\r\n        }\r\n        {event.rewards[cur].faction}\r\n        {set cur to cur + 1}\r\n    }\r\n  }\r\n\")}.\r\n",
      "default": true,
      "name": "Trade voucher redeemed",
      "description": "Se activa cuando canjea un bono comercial"
    },
    "Under attack": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Under attack",
      "description": "Se activa cuando está siendo atacado (al mismo tiempo que el mensaje de voz de Bajo Ataque)"
    },
    "Undocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Reestablecido control completo\", \"Anclajes de aterrizaje desconectados\", \"Desconectado de redes locales\")}.\n\n{set limpetcheck to F(\"Limpet check\")}\n\n{if limpetcheck:\n    {Pause(5000)}\n    {limpetcheck}\n}\n",
      "default": true,
      "name": "Undocked",
      "description": "Se activa cuando su nave despega de una estación espacial o puesto avanzado"
    },
    "VA initialized": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "VA initialized",
      "description": "Se activa cuando se inicializa el plugin de Voice Attack"
    },
    "Vehicle destroyed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\n{OneOf(\"Enlace neuronal\", \"Enlace\", \"Nexo\", \"Vínculo\")} {OneOf(\"finalizado\", \"desactivado\")}.",
      "default": true,
      "name": "Vehicle destroyed",
      "description": "Se activa cuando su vehículo ha resultado destruido"
    }
  }
}