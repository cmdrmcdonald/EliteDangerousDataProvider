<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="desc" xml:space="preserve">
    <value>Track information on your ships.</value>
  </data>
  <data name="export_it_button" xml:space="preserve">
    <value>Export it</value>
  </data>
  <data name="header_location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="header_model" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="header_name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="header_role" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="header_ship_ID" xml:space="preserve">
    <value>Ship ID</value>
  </data>
  <data name="header_spoken_name" xml:space="preserve">
    <value>Name (spoken)</value>
  </data>
  <data name="header_value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="hear_it_button" xml:space="preserve">
    <value>Hear it</value>
  </data>
  <data name="ipa_page" xml:space="preserve">
    <value>https://en.wikipedia.org/wiki/International_Phonetic_Alphabet</value>
  </data>
  <data name="link_ipa" xml:space="preserve">
    <value>International Phonetic Alphabet</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Ship Monitor</value>
  </data>
  <data name="p1" xml:space="preserve">
    <value>This allows you to see your ships and give them individual roles. The information is made available to responders and is used in scripts to tailor actions.</value>
  </data>
  <data name="p2" xml:space="preserve">
    <value>If the name of your ship is hard for EDDI to pronounce then you can add a spoken version of the ship using the</value>
  </data>
  <data name="p3" xml:space="preserve">
    <value>. For example, if your ship was called 'Pride of Achenar' then your spoken name would be 'praɪdɒvˈakɜːnɑ' (note no spaces in the phonetic version).</value>
  </data>
  <data name="p4" xml:space="preserve">
    <value>Please note that if you have not configured access to the Frontier API then some of the data below will be inaccurate or unavailable. Also, if you had multiple ships prior to installing EDDI you will need to swap to them as your primary ship and wait a few moments before full information for them will be available.</value>
  </data>
  <data name="p5" xml:space="preserve">
    <value>EDDI can send an export of your ship's data to Coriolis or EDShipyard (3rd Party tools). Select the tool you prefer.</value>
  </data>
  <data name="ship_ready" xml:space="preserve">
    <value>{0} stands ready.</value>
  </data>
  <data name="ipa_resource1" xml:space="preserve">
    <value>http://www.internationalphoneticalphabet.org/ipa-sounds/ipa-chart-with-sounds/</value>
  </data>
  <data name="ipa_resource2" xml:space="preserve">
    <value>https://tophonetics.com/</value>
  </data>
  <data name="ipa_resource3" xml:space="preserve">
    <value>https://easypronunciation.com/en/english-phonetic-transcription-converter</value>
  </data>
  <data name="ipa_page_p1" xml:space="preserve">
    <value>The</value>
  </data>
  <data name="ipa_resource1_title" xml:space="preserve">
    <value>IPA chart with sounds</value>
  </data>
  <data name="ipa_resource2_title" xml:space="preserve">
    <value>English to IPA translator - ToPhonetics.com</value>
  </data>
  <data name="ipa_resource3_title" xml:space="preserve">
    <value>English to IPA translator - EasyPronunciation.com</value>
  </data>
  <data name="ipa_page_comments" xml:space="preserve">
    <value>Online dictionaries may include appropriate IPA pronunciations for common words. The resources below may be used to generate custom pronunciations for less common words.</value>
  </data>
  <data name="ipa_page_p2" xml:space="preserve">
    <value>is an alphabetic system of phonetic notation based primarily on the Latin alphabet. It was devised by the International Phonetic Association in the late 19th century as a standardized representation of the sounds of spoken language.</value>
  </data>
  <data name="header_hot" xml:space="preserve">
    <value>Status</value>
    <comment>Header for column showing whether ship is Hot or Clean</comment>
  </data>
  <data name="ship_clean" xml:space="preserve">
    <value>Clean</value>
    <comment>Ship is Clean</comment>
  </data>
  <data name="ship_hot" xml:space="preserve">
    <value>Hot</value>
    <comment>Ship is Hot</comment>
  </data>
</root>